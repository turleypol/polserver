use uo;
use os;

include "testutil";

program findpathtests()
  return 1;
endprogram

exported function path_nonblocking()
  var res:=FindPath( 100, 100, 0, 100, 105, 0, realm := _DEFAULT_REALM, flags := FP_IGNORE_MOBILES, searchskirt := 5 );
  print(res);
  var expected:={
    struct{x:=100,y:=101,z:=0},
    struct{x:=100,y:=102,z:=0},
    struct{x:=100,y:=103,z:=0},
    struct{x:=100,y:=104,z:=0},
    struct{x:=100,y:=105,z:=0}
  };
  var comp:=compare_path(res,expected);
  if (!comp)
    return comp;
  endif
  return 1;
endfunction

exported function path_blocking()
  var wall:=CreateItemAtLocation(100,101,0,0x6);
  var res:=FindPath( 100, 100, 0, 100, 105, 0, realm := _DEFAULT_REALM, flags := FP_IGNORE_MOBILES, searchskirt := 5 );
  print(res);
  var expected:={
    struct{x:=101,y:=101,z:=0},
    struct{x:=100,y:=102,z:=0},
    struct{x:=100,y:=103,z:=0},
    struct{x:=100,y:=104,z:=0},
    struct{x:=100,y:=105,z:=0}
  };
  var comp:=compare_path(res,expected);
  if (!comp)
    return comp;
  endif
  return 1;
endfunction


function compare_path(res,exp)
  if (len(res) != len(exp))
    return ret_error($"different length result: {res} expected: {exp}");
  endif
  for i:=1 to res.size()
    if (res[i].x!=exp[i].x || 
        res[i].y!=exp[i].y ||
        res[i].z!=exp[i].z)
      return ret_error($"different entry result: {res} expected: {exp}");
    endif
  endfor
  return 1;
endfunction

