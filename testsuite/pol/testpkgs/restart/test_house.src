use os;
use uo;
include "testutil";

var testrun:=CInt(GetEnvironmentVariable("POLCORE_TEST_RUN"));

program test_house()
  return 1;
endprogram

// save/load test for things in House class
exported function load_save_house()
  var props:={
                {"MultiID", {"multiid",0x6b}}
  };

  if (testrun == 1)
    var house:=CreateMultiAtLocation(50,50,0,0x12000);
    house.name:="load_save_house";
    if (!house)
      return ret_error($"failed to create house {house}");
    endif
    SetGlobalProperty("test_storage_house", house.serial);
  else

    var serial := GetGlobalProperty("test_storage_house");
    if (!serial)
      return ret_error("Global property not found");
    endif

    var house := SystemFindObjectBySerial(serial);
    if (!house)
      return ret_error($"House with serial {serial:#x} does not exists: {house})");
    endif
    foreach prop in props
      var val:=house.get_member(prop[2][1]);
      if (val != prop[2][2])
        return ret_error($"Member {prop[2][1]} {prop[2][2]} != {val}");
      endif
    endforeach
    if (len(house.components)!=2) // door, sign
      return ret_error($"invalid components: {house.components}");
    endif
  endif
  return 1;
endfunction

exported function load_save_house_custom()
  var props:={
                {"Custom", {"custom",1}}
  };

  if (testrun == 1)
    var house:=CreateMultiAtLocation(60,60,0,0x12000);
    house.name:="load_save_house_custom";
    if (!house)
      return ret_error($"failed to create house {house}");
    endif
    SetGlobalProperty("test_storage_house_custom", house.serial);
    house.setcustom(1);
    print(house.addhousepart(0x1,1,2,3);
  else

    var serial := GetGlobalProperty("test_storage_house_custom");
    if (!serial)
      return ret_error("Global property not found");
    endif

    var house := SystemFindObjectBySerial(serial);
    if (!house)
      return ret_error($"House with serial {serial:#x} does not exists: {house}");
    endif
    foreach prop in props
      var val:=house.get_member(prop[2][1]);
      if (val != prop[2][2])
        return ret_error($"Member {prop[2][1]} {prop[2][2]} != {val}");
      endif
    endforeach
    if (len(house.house_parts)!=1) 
      return ret_error($"invalid parts: {house.house_parts}");
    endif
    var p:=house.house_parts[1];
    if (p.graphic != 0x1 || p.xoffset != 1 || p.yoffset != 2 || p.yoffset != 3)
      return ret_error($"invalid part: {p}");
    endif
  endif
  return 1;
endfunction
