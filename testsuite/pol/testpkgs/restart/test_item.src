use os;
use uo;
use polsys;
include "testutil";

var testrun:=CInt(GetEnvironmentVariable("POLCORE_TEST_RUN"));

program test_item()
  if (testrun == 1)
    // Test setting SaveOnExit in item descriptor successfully changes item save behavior
    var desc := GetItemDescriptor(0xeed);
    desc.SaveOnExit := 0;
    var item := CreateItemAtLocation(55,55,0, desc);
    if (!item) 
      return ret_error($"Could not create should-not-save item in first server run: {item}");
    endif
    SetGlobalProperty("test_item_shouldNotExist", item.serial);

    // Change SaveOnExit to true, to enable saving the item
    desc.SaveOnExit := 1;
    var item2 := CreateItemAtLocation(55,55,0, desc);
    if (!item2) 
      return ret_error($"Could not create should-save item in first server run: {item2}");
    endif
    SetGlobalProperty("test_item_shouldExist", item2.serial);
  else
    // Check that the item that should not exist does not exist
    var serial := GetGlobalProperty("test_item_shouldNotExist");
    if (!serial)
      return ret_error("Global property test_item_shouldNotExist not found");
    endif

    var item := SystemFindObjectBySerial(serial);
    if (item)
      return ret_error($"Item with serial {item.serial:#x} erroneously exists: {item.desc} (objtype {item.objtype:#x}) at ({item.x}, {item.y}, {item.z})");
    endif

    // Check that the item that should exist does exist
    var serial2 := GetGlobalProperty("test_item_shouldExist");
    if (!serial2)
      return ret_error("Global property test_item_shouldExist not found");
    endif

    var item2 := SystemFindObjectBySerial(serial2);
    if (!item2)
      return ret_error($"Item with serial {serial2:#x} does not exists: {item2})");
    endif
  endif
  return 1;
endprogram

exported function load_item_base()
var props:=dictionary{
//                   "Name" -> {"","",1},
//                 "Serial" -> {"","",1},
//                "ObjType" -> {"","",1},
//                "Graphic" -> {"","",1},
//                  "Color" -> {"","",1},
//                      "X" -> {"","",1},
//                      "Y" -> {"","",1},
//                      "Z" -> {"","",1},
//                 "Facing" -> {"","",1},
//               "Revision" -> {"","",1},
//                  "Realm" -> {"","",1},
          "FireResistMod" -> {"resist_fire_mod",1},
          "ColdResistMod" -> {"resist_cold_mod",2},
        "EnergyResistMod" -> {"resist_energy_mod",3},
        "PoisonResistMod" -> {"resist_poison_mod",4},
      "PhysicalResistMod" -> {"resist_physical_mod",5},
          "FireDamageMod" -> {"damage_fire_mod",6},
          "ColdDamageMod" -> {"damage_cold_mod",7},
        "EnergyDamageMod" -> {"damage_energy_mod",8},
        "PoisonDamageMod" -> {"damage_poison_mod",9},
      "PhysicalDamageMod" -> {"damage_physical_mod",10}
/*    "LowerReagentCostMod" -> {"","",1},
     "DefenceIncreaseMod" -> {"","",1},
  "DefenceIncreaseCapMod" -> {"","",1},
       "LowerManaCostMod" -> {"","",1},
           "HitChanceMod" -> {"","",1},
       "FireResistCapMod" -> {"","",1},
       "ColdResistCapMod" -> {"","",1},
     "EnergyResistCapMod" -> {"","",1},
   "PhysicalResistCapMod" -> {"","",1},
     "PoisonResistCapMod" -> {"","",1},
 "SpellDamageIncreaseMod" -> {"","",1},
       "FasterCastingMod" -> {"","",1},
  "FasterCastRecoveryMod" -> {"","",1},
                "LuckMod" -> {"","",1},
  "SwingSpeedIncreaseMod" -> {"","",1},*/
};

  if (testrun == 1)
    var item := CreateItemAtLocation(55,55,0, 0xeed);
    SetGlobalProperty("test_item_storage1", item.serial);
    foreach prop in props
      item.set_member(prop[1],prop[2]);
    endfunction
  else

    var serial := GetGlobalProperty("test_item_storage1");
    if (!serial)
      return ret_error("Global property test_item_storage1 not found");
    endif

    var item := SystemFindObjectBySerial(serial);
    if (!item)
      return ret_error($"Item with serial {serial:#x} does not exists: {item})");
    endif
    foreach prop in props
      var val:=item.get_member(prop[1]);
      if (val != prop[2])
        return ret_error($"Member {prop[1]} {prop[2]} != {val}");
      endif
    endfunction
  endif
  return 1;
endfunction
