use os;
use uo;
use polsys;
include "testutil";

var testrun:=CInt(GetEnvironmentVariable("POLCORE_TEST_RUN"));

program test_item()
  if (testrun == 1)
    // Test setting SaveOnExit in item descriptor successfully changes item save behavior
    var desc := GetItemDescriptor(0xeed);
    desc.SaveOnExit := 0;
    var item := CreateItemAtLocation(55,55,0, desc);
    if (!item) 
      return ret_error($"Could not create should-not-save item in first server run: {item}");
    endif
    SetGlobalProperty("test_item_shouldNotExist", item.serial);

    // Change SaveOnExit to true, to enable saving the item
    desc.SaveOnExit := 1;
    var item2 := CreateItemAtLocation(55,55,0, desc);
    if (!item2) 
      return ret_error($"Could not create should-save item in first server run: {item2}");
    endif
    SetGlobalProperty("test_item_shouldExist", item2.serial);
  else
    // Check that the item that should not exist does not exist
    var serial := GetGlobalProperty("test_item_shouldNotExist");
    if (!serial)
      return ret_error("Global property test_item_shouldNotExist not found");
    endif

    var item := SystemFindObjectBySerial(serial);
    if (item)
      return ret_error($"Item with serial {item.serial:#x} erroneously exists: {item.desc} (objtype {item.objtype:#x}) at ({item.x}, {item.y}, {item.z})");
    endif

    // Check that the item that should exist does exist
    var serial2 := GetGlobalProperty("test_item_shouldExist");
    if (!serial2)
      return ret_error("Global property test_item_shouldExist not found");
    endif

    var item2 := SystemFindObjectBySerial(serial2);
    if (!item2)
      return ret_error($"Item with serial {serial2:#x} does not exists: {item2})");
    endif
  endif
  return 1;
endprogram

exported function load_item_base()
  var props:={
                   {"Name", {"name","uobject"}},
                {"Graphic", {"graphic",0x1234}},
                  {"Color", {"color",0xff0}},
                 {"Facing", {"facing",6}}, // after graphic or it gets resetted
//               {"Revision", {"",1}},
          {"FireResistMod", {"resist_fire_mod",1}},
          {"ColdResistMod", {"resist_cold_mod",2}},
        {"EnergyResistMod", {"resist_energy_mod",3}},
        {"PoisonResistMod", {"resist_poison_mod",4}},
      {"PhysicalResistMod", {"resist_physical_mod",5}},
          {"FireDamageMod", {"damage_fire_mod",6}},
          {"ColdDamageMod", {"damage_cold_mod",7}},
        {"EnergyDamageMod", {"damage_energy_mod",8}},
        {"PoisonDamageMod", {"damage_poison_mod",9}},
      {"PhysicalDamageMod", {"damage_physical_mod",10}},
    {"LowerReagentCostMod", {"lower_reagent_cost_mod",11}},
     {"DefenceIncreaseMod", {"defence_increase_mod",12}},
  {"DefenceIncreaseCapMod", {"defence_increase_cap_mod",13}},
       {"LowerManaCostMod", {"lower_mana_cost_mod",14}},
           {"HitChanceMod", {"hit_chance_mod",15}},
       {"FireResistCapMod", {"resist_fire_cap_mod",16}},
       {"ColdResistCapMod", {"resist_cold_cap_mod",17}},
     {"EnergyResistCapMod", {"resist_energy_cap_mod",18}},
   {"PhysicalResistCapMod", {"resist_physical_cap_mod",19}},
     {"PoisonResistCapMod", {"resist_poison_cap_mod",20}},
 {"SpellDamageIncreaseMod", {"spell_damage_increase_mod",21}},
       {"FasterCastingMod", {"faster_casting_mod",22}},
  {"FasterCastRecoveryMod", {"faster_cast_recovery_mod",23}},
                {"LuckMod", {"luck_mod",24}},
  {"SwingSpeedIncreaseMod", {"swing_speed_increase_mod",25}}
  };

  if (testrun == 1)
    var item := CreateItemAtLocation(10,11,-5, 0xeed,1,"britannia2");
    SetGlobalProperty("test_item_storage_base", item.serial);
    foreach prop in props
      print(prop[2][1]);
      print(item.set_member(prop[2][1],prop[2][2]));
    endforeach
    item.setprop("test","testcprop");
  else

    var serial := GetGlobalProperty("test_item_storage_base");
    if (!serial)
      return ret_error("Global property test_item_storage_base not found");
    endif

    var item := SystemFindObjectBySerial(serial);
    if (!item)
      return ret_error($"Item with serial {serial:#x} does not exists: {item})");
    endif
    foreach prop in props
      var val:=item.get_member(prop[2][1]);
      if (val != prop[2][2])
        return ret_error($"Member {prop[2][1]} {prop[2][2]} != {val}");
      endif
    endforeach
    if (item.objtype != 0xeed)
      return ret_error($"wrong objtype {item.objtype:#x} != 0xeed");
    endif
    if (item.x != 10 || item.y != 11 || item.z != -5 || item.realm != "britannia2")
      return ret_error($"wrong pos {item.x},{item.y},{item.z},{item.realm} != 10,11,-5,britannia2");
    endif
    if (item.getprop("test") != "testcprop")
      return ret_error("failed to load cprop: "+item.getprop("test"));
    endif
  endif
  return 1;
endfunction

exported function load_item_itemcpp()
  var props:={
                  {"Name", {"name","itemcpp"}},
//                 {"Layer", {"",1}},
               {"Movable", {"movable",1}},
             {"Invisible", {"invisible",1}},
                {"Cursed", {"cursed",1}},
//             {"Container", {"",1}},
           {"OnUseScript", {"usescript","myusescript"}},
           {"EquipScript", {"equipscript","myequipscript"}},
         {"UnequipScript", {"unequipscript","myunequipscript"}},
//           {"SnoopScript", {"",1}},
               {"DecayAt", {"decayat",12345678}},
             {"SellPrice", {"sellprice",111}},
              {"BuyPrice", {"buyprice",110}},
                {"Newbie", {"newbie",1}},
               {"Insured", {"insured",1}},
//            {"FireResist", {"",1}},
//            {"ColdResist", {"",1}},
//          {"EnergyResist", {"",1}},
//          {"PoisonResist", {"",1}},
//        {"PhysicalResist", {"",1}},
//            {"FireDamage", {"",1}},
//            {"ColdDamage", {"",1}},
//          {"EnergyDamage", {"",1}},
//          {"PoisonDamage", {"",1}},
//        {"PhysicalDamage", {"",1}},
//      {"LowerReagentCost", {"",1}},
//   {"SpellDamageIncrease", {"",1}},
//         {"FasterCasting", {"",1}},
//    {"FasterCastRecovery", {"",1}},
//       {"DefenceIncrease", {"",1}},
//    {"DefenceIncreaseCap", {"",1}},
//         {"LowerManaCost", {"",1}},
//         {"FireResistCap", {"",1}},
//         {"ColdResistCap", {"",1}},
//       {"EnergyResistCap", {"",1}},
//     {"PhysicalResistCap", {"",1}},
//       {"PoisonResistCap", {"",1}},
//                  {"Luck", {"",1}},
//    {"SwingSpeedIncrease", {"",1}},
             {"MaxHp_mod", {"maxhp_mod",200}},
                    {"Hp", {"hp",123}},
               {"Quality", {"quality",1.123}},
            {"NameSuffix", {"name_suffix","my_suffix"}},
                {"NoDrop", {"nodrop",1}}
  };

  if (testrun == 1)
    var item := CreateItemAtLocation(10,11,-5, 0xf3f,1,"britannia2");
    SetGlobalProperty("test_item_storage_itemcpp", item.serial);
    foreach prop in props
      print(propi[2][1]);
      print(item.set_member(prop[2][1],prop[2][2]));
    endforeach
    AddAmount(item,1234);
  else

    var serial := GetGlobalProperty("test_item_storage_itemcpp");
    if (!serial)
      return ret_error("Global property test_item_storage_itemcpp not found");
    endif

    var item := SystemFindObjectBySerial(serial);
    if (!item)
      return ret_error($"Item with serial {serial:#x} does not exists: {item})");
    endif
    foreach prop in props
      var val:=item.get_member(prop[2][1]);
      if (val != prop[2][2])
        return ret_error($"Member {prop[2][1]} {prop[2][2]} != {val}");
      endif
    endforeach
    if (item.amount != 1234)
      return ret_error($"wrong amount {item.amount} != 1234");
    endif
  endif
  return 1;
endfunction
