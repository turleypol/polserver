use uo;
use os;
use util;

include "include/client";
include "include/objtype";
include ":attributes:attributes";

const WAX_PER_CANDLE := 5;

program make_candles( character, item )

  // make sure the item is reachable
  if ( !Accessible( character, item ) && CheckLineOfSight( character, item ) )
    SendSysMessage( character, "You can't reach that!" );
    return;
  endif

  if ( item.movable )
    SendSysMessage( character, "That is locked down." );
    return;
  endif

  // make sure the item can be reserved
  if ( !ReserveItem( item ) )
    SendSysMessage( character, "You can't use that right now." );
    return;
  endif

  SendSysMessage( character, "What do you want to use that on?" );
  var targetted := Target( character );

  // and all the checks again
  if ( !targetted )
    SendSysMessage( character, "Canceled." );
    return;
  endif
  if ( !Accessible( character, targetted ) && CheckLineOfSight( character, item ) )
    SendSysMessage( character, "You can't reach that!" );
    return;
  endif
  /* Don't know if we want to specify that the kettle of wax should be the only locked down thing
        if( targetted.movable )
             return;
        endif
*/
  if ( !ReserveItem( targetted ) )
    SendSysMessage( character, "You can't use that right now." );
    return;
  endif

  // Now decide what to do based on what was selected
  if ( item.objtype == UOBJ_WAX && targetted.objtype == UOBJ_EMPTY_KETTLE )
    MakeKettleOfWax( character, item, targetted );
  elseif ( item.objtype == UOBJ_DIPPING_STICK &&
           targetted.objtype == UOBJ_KETTLE_OF_WAX )
    MakeCandles( character, item, targetted );
  elseif ( item.objtype == UOBJ_HEAD && targetted.objtype == UOBJ_EMPTY_KETTLE )
    MakeSkullOutOfHead( character, item );
  //  elseif (item.objtype == UOBJ_SKULL)
  //      MakeSkullCandle(character, item, targetted);
  else
    SendSysMessage( character, "You don't know how to use those items together." );
  endif

endprogram

///////////////////
//  called when the originally selected item was wax
///////////////////

function MakeKettleOfWax( character, wax, empty_kettle )

  if ( wax.amount < WAX_PER_CANDLE )
    SendSysMessage( character, "You don't have enough wax to make anything." );
    return;
  endif

  PlaySoundEffect( character, 0x0022 );
  sleep( 1 );

  if ( SkillCheck( character, TINKERING, 10 ) <= 0 )
    SendSysMessage( character, "You ruin some of the wax!" );
    var wax_destroyed := RandomInt( WAX_PER_CANDLE ) + 1;
    SubtractAmount( wax, wax_destroyed );
    return;
  endif
  var newkettle := CreateItemInBackpack( character, 0x142a, 1 ); // Pot of wax
  if ( !newkettle )
    PrintTextAbovePrivate( character, "*Your backpack is full!*", character );
    return;
  endif

  SendSysMessage( character, "You place the pot of wax in your backpack." );
  SubtractAmount( wax, WAX_PER_CANDLE );

  newkettle.color := empty_kettle.color;
  SetObjProperty( newkettle, "OldDesc", Cstr( empty_kettle.desc ) );

  DestroyItem( empty_kettle );
  return;
endfunction

///////////////////
//  called if the originally selected item was a dipper
///////////////////

function MakeCandles( character, dipper, kettle_of_wax )

  for i := 1 to 3
    PlaySoundEffect( character, 0x023f );
    sleep( 3 );

    if ( SkillCheck( character, TINKERING, -1, 10 ) <= 0 )
      SendSysMessage( character, "You fail to make any candles." );
    else
      SendSysMessage( character, "You place the candles in your backpack." );
      CreateItemInBackpack( character, 0x0A28, 3 ); // regular candle
    // CreateItemInBackpack(character, 0x142f, 1);  // Very short candle
    // CreateItemInBackpack(character, 0x1433, 1);  // Stubby candle
    // CreateItemInBackpack(character, 0x1437, 1);  // "regular" candle or as close as we can get
    endif
  endfor

  var kettle := CreateItemInBackpack( character, 0x09ed, 1 );
  if ( !kettle )
    PrintTextAbovePrivate( character, "*Your backpack is full!*", character );
    return;
  endif
  kettle.movable := 1;

  kettle.color := kettle_of_wax.color;
  kettle.name := GetObjProperty( kettle_of_wax, "OldDesc" );

  SubtractAmount( dipper, 1 );
  SubtractAmount( kettle_of_wax, 1 );
endfunction

///////////////////
//  called when the originally selected item was a head
///////////////////

function MakeSkullOutOfHead( character, head )

  PlaySoundEffect( character, 0x0021 );
  sleep( 5 );
  // This should reduce karma and/or virtue
  if ( SkillCheck( character, TINKERING, 30 ) <= 0 )
    SendSysMessage( character, "You destroy the head." );
    SubtractAmount( head, 1 );
    return;
  endif

  SendSysMessage( character, "You place the skull in your backpack." );
  SubtractAmount( head, 1 );
  CreateItemInBackpack( character, 0x1ae2, 1 );

  return;
endfunction

///////////////////
//  called when the originally selected item was a skull
///////////////////

function MakeSkullCandle( character, skull, targetted )

  if ( targetted.objtype != 0x142f && targetted.objtype != 0x1433 &&
       targetted.objtype != 0x1437 )
    SendSysMessage( character, "You don't know how to use those items together!" );
    return;
  endif
  // This should reduce karma and/or virtue

  PlaySoundEffect( character, 0x0248 );
  Sleep( 2 );
  PlaySoundEffect( character, 0x022c );
  Sleep( 1 );

  if ( SkillCheck( character, TINKERING, 30 ) <= 0 )
    SendSysMessage( character, "You fail to place the candle in the skull." );
    SubtractAmount( skull, 1 );
    SubtractAmount( targetted, 1 );
    return;
  endif

  SendSysMessage( character, "You put the candle in the skull." );
  SubtractAmount( skull, 1 );
  SubtractAmount( targetted, 1 );
  CreateItemInBackpack( character, 0x1853, 1 );

  return;
endfunction
