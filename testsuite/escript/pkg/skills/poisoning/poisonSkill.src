use uo;
use basic;
use cfgfile;
use cliloc;
use util;
use os;

include "include/client";
include ":attributes:attributes";
include "include/objtype";
include ":virtue:noto";
include ":timedScripts:timedScripts";

var poison_config_file := ReadConfigFile( "poisoning" );
if ( !poison_config_file )
  SysLog( "Error: :poisoning:poisonSkill.src ---> poisoning.cfg file not found." );
  return 0;
endif
var alchemy_itemdesc_file := ReadConfigFile( ":alchemy:itemdesc" );
if ( !alchemy_itemdesc_file )
  SysLog( "Error: :poisoning:poisonSkill.src ---> :alchemy:itemdesc.cfg file not found." );
  return 0;
endif
program do_poisoning( who )
  var the_item;
  var the_poison;
  var skill;
  //    var elem;
  var stren;
  var point;
  var hitscripts := {};
  SendSysMessage( who, "Select a poison potion." );
  the_poison := Target( who, "" );
  if ( !the_poison )
    SendSysMessageCL( who, 1042023, color := 33 ); // Cancelled.
    return 0;
  endif
  if ( !CheckLineOfSight( who, the_poison ) )
    SendSysMessageCL( who, 500876, color := 33 ); // You can't see that.
    return 0;
  endif
  if ( the_poison.container != who.backpack )
    SendSysMessageCL( who, 1042593, color := 33 ); // That is not in your backpack.
    return 0;
  endif
  if ( !Accessible( who, the_poison ) )
    SendSysMessageCL( who, 501975, color := 33 ); // That is too far away.
    return 0;
  endif
  if ( the_poison.graphic != UOBJ_POISON_POTION )
    SendSysMessageCL( who, 502139, color := 33 ); // That is not a poison potion.
    return 0;
  endif
  SendSysMessageCL( who, 502142 ); // To what do you wish to apply the poison?
  the_item := Target( who, TGTOPT_CHECK_LOS );
  if ( !the_item )
    SendSysMessageCL( who, 1042023, color := 33 ); // Cancelled.
    return 0;
  endif
  if ( !CheckLineOfSight( who, the_item ) )
    SendSysMessageCL( who, 500876, color := 33 ); // You can't see that.
    return 0;
  endif
  if ( the_item.container != who.backpack )
    SendSysMessageCL( who, 1042593, color := 33 ); // That is not in your backpack.
    return 0;
  endif
  if ( !Accessible( who, the_item ) )
    SendSysMessageCL( who, 501975, color := 33 ); // That is too far away.
    return 0;
  endif
  /* if(!the_item.IsFood() && !the_item.IsDrink() && the_item.Attribute != "Swordsmanship" && the_item.Attribute != "Fencing")
       SendSysMessageCL(who, 502145, color := 33); // You cannot poison that! You can only poison bladed or piercing weapons, food or drink.)
       return 0;
    endif */
  var potion_attribute := FindConfigElem( alchemy_itemdesc_file,
                                          the_poison.objtype );
  stren := CInt( GetConfigInt( potion_attribute, "strength" ) );
  if ( stren.errortext )
    SysLog( "No 'strength' entry for poison potion in alchemy itemdesc file." );
    return;
  endif
  var duration := 90;
  if ( SkillCheck( who, POISONING, -1, 10 ) > 0 )
    if ( ( the_item.Attribute == "Swordsmanship" ) ||
         ( the_item.Attribute == "Fencing" ) )
      Print( "Swordsmanship" );
      if ( stren == 0 )
        stren := 1;
      endif
      case ( stren )
        1: skill := 10; point := 100;
        2: skill := 30; point := 130;
        3: skill := 55; point := 200;
        4: skill := 88; point := 290;
      endcase
      // Didn't mess with the skill gains here until we see how it pans out 08-05-2011
      if ( SkillCheck( who, POISONING, skill, point / 10 + 20 ) > 0 )

        SubtractAmount( the_poison, 1 );
        CreateItemInBackpack( who, UOBJ_EMPTY_BOTTLE, 1 );
        PlaySoundEffect( who, 0x248 );
        SetObjProperty( the_item, "PoisonStrength", stren );
        SetObjProperty( the_item, "Duration", duration );

        SendSysMessageCL( who, 1010517, color := 66 ); // You apply the poison.
        hitscripts := GetObjProperty( the_item, "HitScripts" );
        if ( !hitscripts )
          hitscripts := {};
          hitscripts[1] := ":combat:hitScripts/poisonHit";
        else
          hitscripts.append( ":combat:hitScripts/poisonHit" );
        endif
        SetObjProperty( the_item, "HitScripts", hitscripts );

        // Drop virtues.
        VirtueDrop( who, stren );
        return 1;
      else
        // Check to determine if the player was accidentally poisoned.
        SelfPoisonCheck( who, stren );
        return 0;
      endif
    elseif ( ( the_item.objtype == 0xf3f ) ||
             ( the_item.objtype == 0x1bfb ) ) // arrow and crossbow bolt
      if ( !ReserveItem( the_item ) )
        SendSysMessage( who, "cancelled" );
        return 0;
      endif
      if ( the_item.amount < 10 )
        SendSysMessage( who, "Those must be poisoned in groups of 10." );
        return 0;
      endif
      SubtractAmount( the_poison, 1 );
      CreateItemInBackpack( who, UOBJ_EMPTY_BOTTLE, 1 );
      if ( SkillCheck( who, POISONING, -1, 10 ) > 0 )
        var obj := the_item.objtype;
        if ( !SubtractAmount( the_item, 10 ) )
          SendSysMessage( who, "Those must be poisoned in groups of 10." );
          return 0;
        endif
        // Convert arrows and crossbow bolts to the poisoned versions.
        obj := CreateItemInBackpack( who, "parrow", 10 );
        SetObjProperty( obj, "PoisonStrength", stren );
        SetObjProperty( obj, "Duration", duration );
        // There might be more elegant ways to solve that.
        // Also i would love to see an approach that makes it easier to add new poisons
        // without altering the code.

        var oldName := obj.name;
        var pColor := CInt( GetConfigInt( potion_attribute, "Color" ) );

        case ( stren )
          1:
            SendSysMessage( who, "poison strenght 1 detected." );
            // change that to poison pot color once the pots have different colors.
            obj.color := pColor;
            SetName( obj, "lesser " + oldName );
          2:
            // for regular poison we will only change color once colors are introduced.
            obj.color := pColor;
          3:
            // greater poison
            obj.color := pColor;
            SetName( obj, "greater " + oldName );
          4:
            // deadly poison
            obj.color := pColor;
            SetName( obj, "deadly " + oldName );

          default:
            // leaving that here but the case should never happen
            SendSysMessage( who, "Can not determine proper poison strenght" );
        endcase

        hitscripts := GetObjProperty( the_item, "HitScripts" );
        if ( !hitscripts )
          hitscripts := {};
          hitscripts[1] := ":combat:hitScripts/poisonHit";
        else
          hitscripts.append( ":combat:hitScripts/poisonHit" );
        endif
        SetObjProperty( the_item, "HitScripts", hitscripts );

        PlaySoundEffect( who, 0x248 );
        SendSysMessage( who, "You poison some arrows and put them in your backpack" );
        // Drop virtues.
        VirtueDrop( who, stren );
        return 1;
      else
        // Check to determine if the player was accidentally poisoned.
        SelfPoisonCheck( who, stren );
        return 0;
      endif
    elseif ( the_item.IsFood() || the_item.IsDrink() )
      SubtractAmount( the_poison, 1 );
      CreateItemInBackpack( who, UOBJ_EMPTY_BOTTLE, 1 );
      if ( SkillCheck( who, POISONING, skill, point / 10 + 20 ) > 0 )
        PlaySoundEffect( who, 0x248 );
        SetObjProperty( the_item, "PoisonStrength", stren );
        SetObjProperty( the_item, "duration", duration );
        SendSysMessageCL( who, 1010517, color := 66 ); // You apply the poison
        VirtueDrop( who, stren );
        return 1;
      else
        // Check to determine if the player was accidentally poisoned.
        SelfPoisonCheck( who, stren );
        return 0;
      endif
    else
      SendSysMessage( who, "That cannot be poisoned." );
      return 0;
    endif
  endif
endprogram

/*
function poisonArrows (arrow)

//    var arrow := CreateItemInBackpack( who, obj, 10 );
    var arrowName := arrow.desc;
    arrow.color := 0x8042;
    arrow.desc := "poisoned " + arrowName;
    SetObjProperty(arrow, "HitScripts", {":combat:poisonHit"});

endfunction
*/

function VirtueDrop( player, strength )
  // Adjust the following virtues negatively for poisoning a weapon.
  case ( strength )
    1:
      VS_AdjustVirtue( player, "honor", -3, prob := 35 );
      VS_AdjustVirtue( player, "compassion", -3, 35 );
    2:
      VS_AdjustVirtue( player, "honor", -3, 50 );
      VS_AdjustVirtue( player, "compassion", -3, 50 );
    3:
      VS_AdjustVirtue( player, "honor", -3, 65 );
      VS_AdjustVirtue( player, "compassion", -3, 65 );
    4:
      VS_AdjustVirtue( player, "honor", -3, 80 );
      VS_AdjustVirtue( player, "compassion", -3, 80 );
  endcase
endfunction

function SelfPoisonCheck( who, strength )
  if ( RandomInt( 100 ) > GetAttribute( who, POISONING ) )
    SendSysMessageCL( who, 502148, color := 33 ); // You make a grave mistake while applying the poison.
    SendSysMessage( who, "You fail, and poison yourself!" );
    TS_StartTimer( who, "DefaultPoison", 120, strength, who );
  else
    SendSysMessage( who, "You fail to apply the poison properly." );
  endif
endfunction
