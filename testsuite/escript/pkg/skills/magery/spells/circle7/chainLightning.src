use vitals;
use uo;
use os;
use util;
use cliloc;

include ":attributes:attributes";
include ":magery:spells";
include "include/client";
include ":damage:damage";

program cast_chainlightning( parms )
  var caster := parms[1];
  var info := parms[2];

  // Base damage is a decimal number in between min and max damage
  var min_damage := CInt( GetConfigInt( info.spell_config, "MinBaseDamage" ) );
  var max_damage := CInt( GetConfigInt( info.spell_config, "MaxBaseDamage" ) );
  var base_damage := min_damage + ( CDbl( RandomInt( CInt( ( max_damage - min_damage )
                                                         * 10 ) ) + 1 ) / 10 );
  var damage;
  // Get all targets in area excluding party and self. Damaged is divided by number of valid targets.
  var area_size := CInt( GetConfigInt( info.spell_config, "AreaSize" ) );
  var party_members := caster.party.members;
  var excludes := {};
  if ( party_members == error )
    excludes := array{ caster.serial };
  else
    foreach member in party_members
      excludes.Append( member.serial );
    endforeach
  endif

  var targs := MS_GetVaildTargets( caster, area_size, 1, excludes );
  if ( targs.size() > 1 )
    base_damage := base_damage * 2;
  endif

  foreach vtarg in targs
    // uoguide.com does not mention LOS needed for damage to target. That is why this if is commented out.
    // if((CheckLineOfSight(vtarg, caster)) and (vtarg.cmdlevel < 2))
    if ( Reflected( vtarg ) )
      SendSysMessage( caster, "The spell was reflected back onto you!!!",
                      color := 33 );
      vtarg := caster;
    endif

    damage := MS_GetSpellDamage( caster, vtarg, base_damage ) / targs.Size();
    PlayLightningBoltEffect( vtarg );
    PlaySoundEffect( vtarg, SFX_SPELL_LIGHTNING );
    ApplySpellDamageEX( vtarg, damage, info.damage_type, caster, info.circle,
                        "Chain Lightning" );
    sleepms( 600 );
  // endif
  endforeach

  return 1;

endprogram
