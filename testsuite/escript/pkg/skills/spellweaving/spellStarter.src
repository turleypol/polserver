
use uo;
use cliloc;

include ":attributes:attributes";

/******************************************************
*
*  spellStarter( parms )
*
*  Desc:
*      This script will carry out all checks and consume resources/mana prior to starting the spell script.
*      On failure - Will return 0, however all error messages are handled within this script.
*      On success - Will return 1 after the spells script has been launched.
*      All messages where possible have been converted to clilocs.
*      Full setup for the spell should be done within this script, that includes skill check to succeed, delay of cast, word of power, consuming mana.
*      The spell script itself should only handle processing of the spells actual actions.
*
*  Args:
*      Parms - This should be an array from either the spellbook script, scroll script or NPC script.
*      The parms argument should be an array of the following:
*          [1] string      -   #book, #scroll, #npc - this would be set depending on how the spell has been called.
*          [2] mobileref   -   this is the player or npc casting the spell.
*          [3] objref      -   this is the spellbook or scroll used to cast the spell, npcs will supply a NULL reference.
*          [4] struct      -   this is the info struct which will usually contain spell data from the config file.
*
*******************************************************/

program spellStarter( parms )
  var mobile, cast_from, info;

  case ( parms[1] )
    "#book":
    "#scroll":
      mobile := parms[2];
      cast_from := parms[3];
      info := parms[4];
      break;
    "#npc": // To be written.
  endcase

  EraseObjProperty( mobile, "IsMeditating" );
  EraseObjProperty( mobile, "HealTimer" );
  EraseObjProperty( mobile, "#Medding" );

  /*****************************************
   *
   *   CHECK BLOCK:
   *       1.  Check if they are casting.
   *       2.  Check if they are not an npc or squelched.
   *       3.  Check if their hands are obstructed.
   *       4.  Check if they are frozen.
   *       5.  Check if it can consume a scroll if casting from scrolls(potential bug abuse).
   *       6.  Check if it can consume mana.
   *
   ******************************************/

  if ( GetObjProperty( mobile, "#Casting" ) )
    SendSysMessageCL( mobile, 502642, uc_text := 0, font := _DEFAULT_CLFONT,
                      color := 33 ); // You are already casting a spell.
    return 0;
  elseif ( mobile.squelched && !mobile.npctemplate )
    SendSysMessageCL( mobile, 1005567, uc_text := 0, font := _DEFAULT_CLFONT,
                      color := 33 ); // Your conscience prevents you from putting the spell together properly!
    // FailSpell(mobile);
    return 0;
  /* elseif ( !EquipmentCheck(mobile) )
       SendSysMessageCL(mobile, 502626, uc_text:= 0, font:= _DEFAULT_CLFONT, color := 33); // Your hands must be free to cast spells or meditate.
       //FailSpell(mobile);
       return 0; */
  elseif ( mobile.frozen )
    SendSysMessageCL( mobile, 502643, uc_text := 0, font := _DEFAULT_CLFONT,
                      color := 33 ); // You cannot cast a spell while frozen.
    // FailSpell(mobile);
    return 0;
  endif
  if ( parms[1] == "#scroll" )
    if ( !ConsumeSubstance( mobile.backpack, cast_from.objtype, amount := 1 ) )
      SendSysMessageCL( mobile, 501625, uc_text := 0, font := _DEFAULT_CLFONT,
                        color := 33 ); // You seem to have lost track of your scroll.
      return 0;
    endif
  endif

  // Added to support necro spell mind rot.
  var mana_cost := info.ManaCost;
  if ( GetObjProperty( mobile, "#mindrot" ) )
    if ( mobile.isA( POLCLASS_NPC ) )
      mana_cost := mana_cost * 2;
    else
      mana_cost := mana_cost * 1.25;
    endif
  endif

  /********************************************
   *
   * Insert LMC calcs here once added to distro/core
   *
   ********************************************/

  if ( !AP_ConsumeVital( mobile, VITALID_MANA, mana_cost ) )
    SendSysMessageCL( mobile, 501903, uc_text := 0, font := _DEFAULT_CLFONT,
                      color := 33 ); // You don't have enough mana to cast that spell!
    // FailSpell(mobile);
    return 0;
  endif

  /****************
   *END CHECK BLOCK
   ****************/

  SetObjProperty( mobile, "#Casting", GetPid() );
  mobile.frozen := 1;
  mobile.hidden := 0;
  PrintTextAbove( mobile, info.PowerWords );
  var delay := info.Delay;
  var mod := 0;
  var protection := GetObjProperty( mobile, "Protection" );
  var orig_hp := AP_GetVital( mobile, "Hits" );
  // DELAY

  while ( delay > 0 )
    if ( !protection )
      // There is a small chance, perhaps, that the mobile is damaged and then regens
      // or is healed enough in the ~50ms delay between checking. It could be more
      // accurate to grab the pid from ApplyDamageEX and send a damaged event to this
      // script, on top of also checking the health.
      if ( orig_hp > AP_GetVital( mobile, "Hits" ) )
        SendSysMessage( mobile, "Your concentration is disturbed, thus ruining thy spell.",
                        color := 33 );
        // FailSpell(mobile);
        // PlaySoundEffect(mobile, SFX_SPELL_FAIL);
        // PlayObjectCenteredEffect(mobile, FX_SPELL_FAIL, 5, 50);
        return 0;
      endif
    endif

    mod := delay % 50;
    if ( mod )
      SleepMS( mod );
      delay := delay - ( mod );
    else
      SleepMS( 50 );
      delay := delay - 50;
    endif
  endwhile

  // SKILLCHECK

  var skill_check := SkillCheck( mobile, SPELLWEAVING, info.difficulty, 30 );

  // Added to support necro wraith form can recall regardless of their magery skill level.
  if ( GetObjProperty( mobile, "wraith" ) && info.spellId == 32 )
    skill_check := 1;
  endif
  mobile.frozen := 0;

  start_script( ":spellweaving:" + info.Script, parms );

  return 0;

endprogram
