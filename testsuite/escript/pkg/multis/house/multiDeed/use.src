use cfgfile;
use cliloc;
use uo;
use os;

include ":keys:key";
include ":containers:storageAreas";
include "include/objtype";
include "include/findCity";
include "include/canAccess";
include ":multihousing:isValidLoc";
include ":multihousing:multihouse_settings";

const UOBJECT_TENT_CHEST := 0xe43;

program usehousedeed( who, deed )
  if ( !ReserveItem( deed ) )
    return;
  endif
  if ( !can_access( who, deed ) )
    return;
  endif
  EraseObjProperty( who, "IsMeditating" );
  if ( deed.movable == 0 )
    SendSysMessageCL( who, 1010515, color := 33 ); // You cannot use that while it is locked down.
    return;
  endif
  if ( !IsInContainer( who.backpack, deed ) )
    SendSysMessageCL( who, 1045156, color := 33 ); // You must have the deed in your backpack to use it.
    return;
  endif
  if ( DeedAlreadyBuiltFrom( deed ) )
    PrintTextAbovePrivate( deed, "That house has already been built.", who );
  else
    Buildhouse( who, deed );
  endif
endprogram

function Buildhouse( who, deed )
  if ( !ReserveItem( deed ) )
    return;
  endif
  var housetype := GetHouseObjtype( deed );
  if ( housetype == error )
    PrintTextAbovePrivate( deed, "That house deed appears to be broken.", who );
    syslog( "Deed " + deed.serial + " had no housetype property!" );
    return;
  endif
  SendSysMessageCL( who, 501274, color := 88 ); // Where do you wish to build the house?
  var where := TargetMultiPlacement( who, housetype );
  if ( !where )
    SendSysMessageCL( who, 1042023, color := 33 ); // Cancelled.
    return;
  endif
  if ( ( FindCity( who ) != "no city" ) || ( FindCity( where ) != "no city" ) )
    SendSysMessageCL( who, 500269, color := 33 ); // You cannot build that there.
    PrintTextAbovePrivate( deed, "You can't build in cities.", who, color := 33 );
    return;
  endif
  if ( Distance( who, where ) > 50 )
    PrintTextAbovePrivate( deed, "You are too far from where you are trying to build.",
                           who );
    return;
  endif
  if ( !isValidLoc( where.x, where.y ) && ( who.cmdlevel < 2 ) )
    PrintTextAbovePrivate( deed, "You may not build in Green Acres.", who );
    return;
  endif
  set_critical( 1 );
  var created := CreatehouseKeysAndBuiltDeed2( who, housetype, where, deed );
  if ( !created )
    return;
  endif

  var lock := GetObjProperty( deed, "numlockdowns" );
  var sec := GetObjProperty( deed, "numsecure" );
  if ( DestroyItem( deed ) )
    var LockID := AllocateLockID();
    // CProps for deed in bank box.
    SetObjProperty( created.builtdeed, "builtserial", created.house.serial );
    SetObjProperty( created.builtdeed, "RemainingLockdowns", lock );
    SetObjProperty( created.builtdeed, "RemainingSecures", sec );
    ///////////////////////////////
    SetObjProperty( created.packkey, "LockID", LockID );
    SetObjProperty( created.bankkey, "LockID", LockID );
    SetObjProperty( created.house, "RemainingLockdowns", lock );
    SetObjProperty( created.house, "RemainingSecures", sec );
    SetObjProperty( created.house, "footage", created.footage );
    foreach item in ( created.house.components )
      if ( item.IsA( POLCLASS_DOOR ) )
        item.locked := 1;
        SetObjProperty( item, "LockID", LockID );
        SetObjProperty( item, "houseserial", created.house.serial );
      elseif ( ( item.objtype == 0xBD0 ) || ( item.objtype == 0xBD2 ) )
        SetObjProperty( item, "LockID", LockID );
        SetObjProperty( item, "houseserial", created.house.serial );
        SetObjProperty( item, "signserial", item.serial );
        SetObjProperty( item, "RemainingLockdowns", lock );
        SetObjProperty( item, "MaxLockdowns", lock );
        SetObjProperty( item, "RemainingSecures", sec );
        SetObjProperty( item, "MaxSecures", sec );
        SetObjProperty( item, "footage", created.footage );
        SetObjProperty( item, "ownerserial", who.serial );
        SetObjProperty( item, "owneracct", who.acctname );
        SetObjProperty( item, "builtdeed", created.builtdeed.serial );
        SetObjProperty( item, "decay", ( ReadGameClock() + get_abandon_time() ) );
        SetObjProperty( created.builtdeed, "signserial", item.serial );
      endif
    endforeach
    SetObjProperty( created.house, "signserial",
                    GetObjProperty( created.builtdeed, "signserial" ) );
  else
    DestroyItem( created.builtdeed );
    DestroyItem( created.packkey );
    DestroyItem( created.bankkey );
    foreach item in ( created.house.components )
      DestroyItem( item );
    endforeach
    DestroyMulti( created.house );
  endif
endfunction

function CreatehouseKeysAndBuiltDeed2( character, housetype, where, deed )
  var bank_region := CP_DEFAULT_AREA;
  var bankbox := CP_GetStorageContainerForMobile( character, bank_region,
                                                  CP_CREATE );
  var x := where.x, y := where.y, z := where.z, map := where.realm;
  var packkey := CreateItemInBackpack( character, UOBJ_GOLD_KEY );
  if ( !packkey )
    PrintTextAbovePrivate( character, "Your backpack is too full!", character );
    return 0;
  endif
  var bankkey := CreateItemInContainer( bankbox, UOBJ_GOLD_KEY );
  if ( !bankkey )
    PrintTextAbovePrivate( character, "Your bankbox is too full!", character );
    DestroyItem( packkey );
    return 0;
  endif
  var builtdeed := CreateItemInContainer( bankbox, 0x14ef );
  SetName( builtdeed, deed.desc + " at " + x + ", " + y + ", " + z + "(built)" );
  if ( !builtdeed )
    PrintTextAbovePrivate( character, "Your bankbox is too full!", character );
    DestroyItem( packkey );
    DestroyItem( bankkey );
    return 0;
  endif
  var house;
  if ( character.cmdlevel > 2 )
    house := CreateMultiAtLocation( x, y, z, housetype, CRMULTI_IGNORE_ALL,
                                    map );
  else
    house := CreateMultiAtLocation( x, y, z, housetype, 0, map );
  endif
  if ( !house )
    house := CreateMultiAtLocation( x + 10, y, z, housetype, 0, map );
  endif
  if ( !house )
    house := CreateMultiAtLocation( x, y + 10, z, housetype, 0, map );
  endif
  if ( !house )
    house := CreateMultiAtLocation( x - 10, y, z, housetype, 0, map );
  endif
  if ( !house )
    house := CreateMultiAtLocation( x, y - 10, z, housetype, 0, map );
  endif
  if ( !house )
    house := CreateMultiAtLocation( x + 10, y + 10, z, housetype, 0, map );
  endif
  if ( !house )
    house := CreateMultiAtLocation( x - 10, y - 10, z, housetype, 0, map );
  endif

  var ftage := FindBoxArray( housetype, house );
  SetObjProperty( house, "RemainingLockdowns",
                  GetObjProperty( deed, "RemainingLockdowns" ) );
  SetObjProperty( house, "RemainingSecures",
                  GetObjProperty( deed, "RemainingSecures" ) );
  SetObjProperty( house, "ownerserial", character.serial );
  SetObjProperty( house, "owneracct", character.acctname );
  SetObjProperty( house, "builtdeed", builtdeed.serial );
  SetObjProperty( house, "decay", ( ReadGameClock() + get_abandon_time() ) );
  if ( housetype == 0x6bb8 || housetype == 0x16070 || housetype == 0x16072 )
    house.movable := 0;
    house.visible := 1;
  endif
  if ( !house )
    PrintTextAbovePrivate( character, "I can't place the house there.",
                           character );
    print( house.errortext );
    DestroyItem( packkey );
    DestroyItem( bankkey );
    DestroyItem( builtdeed );
    return;
  endif
  var result := array;
  result.+packkey := packkey;
  result.+bankkey := bankkey;
  result.+builtdeed := builtdeed;
  result.+house := house;
  result.+footage := ftage;
  return result;
endfunction

function DeedAlreadyBuiltFrom( deed )
  if ( GetObjProperty( deed, "builtserial" ) )
    return 1;
  else
    return 0;
  endif
endfunction

function GetHouseObjtype( deed )
  var id := ReadConfigFile( "itemdesc" );
  var elem := id[deed.objtype];
  var ot := GetObjtypeByName( elem.HouseObjType );
  return ot;
endfunction

function IsInContainer( container, item )
  foreach thing in EnumerateItemsInContainer( container )
    if ( thing.serial == item.serial )
      return 1;
    endif
  endforeach
  return 0;
endfunction

function FindBoxArray( housetype, house )
  var ftage;
  var sign1;
  foreach item in ( house.components )
    if ( item.IsMultiHouseSign() )
      sign1 := item;
    endif
  endforeach

  case ( housetype )
    0x16060:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // smallstoneandplasterhouse
    0x16061:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // smallstonehouse
    0x16062:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // smallstonehousetwo
    0x16063:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // smallwoodenhouse
    0x16064:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // smallplasterhouse
    0x16065:
      ftage := largehousearray( house, house.x, house.y, house.z ); // largebrickhouse
    0x16066:
      ftage := twostoryarray( house, house.x, house.y, house.z ); // twostorywoodandplasterhouse
    0x16068:
      ftage := twostoryarray( house, house.x, house.y, house.z ); // twostorystoneandplasterhouse
    0x16069:
      ftage := bigtowerarray( house, house.x, house.y, house.z ); // tower
    0x16070: ftage := keeparray( house, house.x, house.y, house.z ); // keep
    0x16071: ftage := castlearray( house, house.x, house.y, house.z ); // castle
    0x16072:
      ftage := largehousearray( house, house.x, house.y, house.z ); // largepatiohouse
    0x16073:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // smallwoodandstrawhouse
    0x16074:
      ftage := largehousearray( house, house.x, house.y, house.z ); // large?MarblePatioHouse
    0x16075:
      ftage := twostoryarray( house, house.x, house.y, house.z ); // Small Stone Tower
    0x16076:
      ftage := twostoryarray( house, house.x, house.y, house.z ); // Log Cabin
    0x16077:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // Sandstone Patio House
    0x16078:
      ftage := twostoryarray( house, house.x, house.y, house.z ); // Two Storey Villa with Patio
    0x16079:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // Small Stone Workshop
    0x1607A:
      ftage := smallhousearray( house, house.x, house.y, house.z ); // Small Marble Workshop
  endcase
  return ftage;
endfunction

function smallhousearray( house, x, y, z )
  var boxarray := {};
  var box1 := {};
  box1.append( x - 2 );
  box1.append( y - 2 );
  box1.append( z + 7 );
  box1.append( x + 2 );
  box1.append( y + 2 );
  box1.append( z + 27 );
  boxarray[1] := box1;
  var banarray := {};
  var bantile;
  bantile := CreateItemAtLocation( x - 1, y + 4, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 0, y + 4, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 4, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  SetObjProperty( house, "bantiles", banarray );
  return boxarray;
endfunction

function largehousearray( house, x, y, z )
  var boxarray := {};
  var box1 := {};
  box1.append( x - 6 );
  box1.append( y - 6 );
  box1.append( z + 7 );
  box1.append( x + 6 );
  box1.append( y + 5 );
  box1.append( z + 27 );
  boxarray[1] := box1;
  var banarray := {};
  var bantile;
  PrintTextAbove( house, "H: " + house.objtype );
  if ( house.objtype == 0x6072 )
    bantile := CreateItemAtLocation( x - 5, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
    bantile := CreateItemAtLocation( x - 4, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
    bantile := CreateItemAtLocation( x - 3, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
    bantile := CreateItemAtLocation( x - 2, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
  else
    bantile := CreateItemAtLocation( x - 2, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
    bantile := CreateItemAtLocation( x - 1, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
    bantile := CreateItemAtLocation( x, y + 7, Z + 4, "bantile", 1, house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
    bantile := CreateItemAtLocation( x + 1, y + 7, Z + 4, "bantile", 1,
                                     house.realm );
    banarray.append( bantile.serial );
    SetObjProperty( bantile, "houseserial", house.serial );
  endif
  SetObjProperty( house, "bantiles", banarray );
  return boxarray;
endfunction

function twostoryarray( house, x, y, z )
  var boxarray := {};
  var box1 := {};
  box1.append( x - 6 );
  box1.append( y - 6 );
  box1.append( z + 7 );
  box1.append( x );
  box1.append( y + 5 );
  box1.append( z + 47 );
  boxarray[1] := box1;
  box1 := {};
  box1.append( x );
  box1.append( y );
  box1.append( z + 7 );
  box1.append( x + 5 );
  box1.append( y + 5 );
  box1.append( z + 47 );
  boxarray[2] := box1;
  var banarray := {};
  var bantile;
  bantile := CreateItemAtLocation( x - 4, y + 7, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 3, y + 7, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 2, y + 7, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 1, y + 7, Z + 4, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  SetObjProperty( house, "bantiles", banarray );
  return boxarray;
endfunction

function bigtowerarray( house, x, y, z )
  var boxarray := {};
  var box1 := {};
  box1.append( x - 6 );
  box1.append( y - 6 );
  box1.append( z + 6 );
  box1.append( x + 7 );
  box1.append( y + 5 );
  box1.append( z + 65 );
  boxarray[1] := box1;
  box1 := {};
  box1.append( x - 10 );
  box1.append( y - 6 );
  box1.append( z + 66 );
  box1.append( x + 11 );
  box1.append( y + 5 );
  box1.append( z + 86 );
  boxarray[2] := box1;
  var banarray := {};
  var bantile;
  bantile := CreateItemAtLocation( x - 1, y + 8, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y + 8, Z + 3, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 8, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 2, y + 8, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 1, y + 7, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y + 7, Z + 6, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 7, Z + 6, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 2, y + 7, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  SetObjProperty( house, "bantiles", banarray );
  return boxarray;
endfunction

function castlearray( house, x, y, z )
  var boxarray := {};
  var box1 := {};
  box1.append( x - 14 );
  box1.append( y - 14 );
  box1.append( z );
  box1.append( x + 14 );
  box1.append( y + 14 );
  box1.append( z + 47 );
  boxarray[1] := box1;
  var banarray := {};
  var bantile;
  bantile := CreateItemAtLocation( x - 1, y + 16, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y + 16, Z + 3, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 16, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 2, y + 16, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 1, y + 10, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y + 10, Z + 3, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 10, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 2, y + 10, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 1, y + 6, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y + 6, Z + 3, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 6, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 2, y + 6, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 2, y - 10, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x - 1, y - 10, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y - 10, Z + 3, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y - 10, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  SetObjProperty( house, "bantiles", banarray );
  return boxarray;
endfunction

function keeparray( house, x, y, z )
  var boxarray := {};
  var box1 := {};
  box1.append( x - 10 );
  box1.append( y - 10 );
  box1.append( z );
  box1.append( x + 11 );
  box1.append( y + 11 );
  box1.append( z + 47 );
  boxarray[1] := box1;
  var banarray := {};
  var bantile;
  bantile := CreateItemAtLocation( x - 1, y + 11, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x, y + 11, Z + 3, "bantile", 1, house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 1, y + 11, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  bantile := CreateItemAtLocation( x + 2, y + 11, Z + 3, "bantile", 1,
                                   house.realm );
  banarray.append( bantile.serial );
  SetObjProperty( bantile, "houseserial", house.serial );
  SetObjProperty( house, "bantiles", banarray );
  return boxarray;
endfunction
