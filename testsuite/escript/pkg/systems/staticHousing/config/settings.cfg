# $Id: settings.cfg 620 2006-07-08 17:14:41Z Yukiko $
#
#

Elem	Settings
{
	// The following three (3) settings apply to the staticDeed script
	// PriceEditable
	// 0 - The price per square for a house is not changeable.
	// 1 - The price per square for a house is changeable.
    PriceEditable	1

	// SecuresEditable
	// 0 - The number of secures for a house are not changeable.
	// 1 - The number of secures for a house are changeable.
    SecuresEditable	1

	// LockDownsEditable
	// 0 - The number of lockdowns for a house are not changeable.
	// 1 - The number of lockdowns for a house are changeable.
    LockDownsEditable	1

	//
	// RefreshTime
	// At the time that a house is purchased and each time it is refreshed this is the amount of
	// time added to the decay timer. The time is in real life days.
	// DecayTime 90 default
	RefreshTime 90

	//
	// HouseValuesCount
	// Some server developers may wish to impose a limit on the number of houses an account or a character
	// may own. The value of a house might be based on two things (See the next setting).
	//
	// 0 - There is no limit to the number of houses a player may own.
	// 1 - There is a limit to the number of houses a player may own.
    HouseValuesCount	0

	// HouseValuesDeterminedBy
	// The two factors for limiting the number of houses owned are by Price and HousesOwned.
	//
	// Price - The value of a house will be determined by the integer value of price/HouseValueDivisor
	//
	// HousesOwned - The house value will be determined by how many houses are owned.
	// With the setting HousesOwned set, each house counts as 1 toward the TotalValueOfHouses CProp
	// set on either the account or the character which is determined by the HouseValueAppliedTo setting.
    HouseValuesDeterminedBy	HousesOwned

	// HouseValueAppliedTo
	// Options are:
	// Account - If Account then no account may have more than MaxHouseValue on their account.
	// Character - If Character then no character may have more than MaxHouseValue on that character.
    HouseValueAppliedTo	Character

	// HouseValueDivisor
	// If house values are determined by Price then this will be the number divided into the
	// price of the house at the time of purchase. You will have to adjust this based upon
	// your pricing structure for houses. Some trial and error testing may be necessary to
	// get the HouseValueDivisor to work out based on your pricing structure.
	// If the house value/HouseValueDivisor is less than 1 then it will default to 1.
    HouseValueDivisor	1000

	// MaxHouseValue
	// This can be any integer you wish to assign. You will probably have to adjust this depending on
	// whether you are determining house value by houses owned or your house pricing scale,
	// and whether the house value applies to accounts or characters.
    MaxHouseValue	200

	// PricePerSquareDeterminedBy
	// Options currently are under development but here are the three I will be implementing:
	// Default - The DefaultPricePerSqure setting will be used if this is chosen.
	// Note: This is currently the only option. If you set this to the one of the other
	// two options they will return the DefaultPricePerSqure for now.
	//
	// Note: The following two options are not yet implemented.
	// City - This will read from regions.cfg the price per square for a given city.
	// If there is no HousePricePerSquare entry in regions.cfg then the built-in default
	// price per square will be used. This requires the developer to enter a value for
	// each city in regions.cfg.
	// For example for Britain you might enter this element: HousePricePerSquare 3000
	// Presumably the more popular the city the higher the price per square would be.
	//
	// Market - The number of houses owned in a given city will have a bearing on the
	// price per square. The fewer houses available will cause the price to be more expensive.
	// Conversely the more houses available will cause the price to be less expensive.
	//
	// The Market option requires some thought on my part as to how it will be implemented
	// and may require some work on the part of the developer of each server. She may have
	// to gather a total of the houses available in a city. This number will have to
	// be entered somewhere. Once that is done everything else will be handled by a control script.
	// I will probably create some commands to aid in setting this up.
	//
	// Both City and Market settings will not return accurate values unless ALL static
	// structures that are to be made available for purchase within a city have been setup
	// in advance using the staticdeed command.
	// The Market option is a longer term goal and hasn't even been well thought out yet. :)
	//
	// PricePerSquareDeterminedBy	Default is the default setting.
    PricePerSquareDeterminedBy	Default

	// DefaultPricePerSquare
	// This can be any integer from 1 up to whatever the developer chooses.
    DefaultPricePerSquare	1000

	// LockdownDivisor is divided into the total square footage area to determine the
	// maximum number of lockdowns for a structure.
	// The formula is: (x * y * z) / LockdownDivisor where x and y are the dimensions of the level
	// and z is the number of levels.
	// LockdownDivisor 3 default
	LockdownDivisor 3

	// MinLockdowns is the minimum lockdowns that can be assigned to a structure.
	// If the total lockdowns is less than this then this will be the minimum default.
	// MinLockdowns 50 default
	MinLockdowns 25

	// SecureDivisor is divided into the total cubic area to determine the number of secures for a structure.
	// The formula is: (x * y * z) / SecureDivisor where x and y are the dimensions of the level
	// and z is the number of levels.
	// SecureDivisor 50 default
	SecureDivisor 50

	// MinSecures is the minimum secures that can be assigned to a structure.
	// If the total secures is less than this then this will be the minimum default.
	// MinSecures default is 2
	MinSecures 2
}

