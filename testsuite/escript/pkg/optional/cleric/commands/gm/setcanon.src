use os;
use uo;
use cfgfile;
use cliloc;

include ":cleric:cleric";

const MAXLEVEL := 7;

program setcanon( who )
  SendSysMessage( who, "Select a canon:", color := 88 );
  var book := Target( who );
  if ( !book )
    SendSysMessageCL( who, 1042023, color := 33 ); // Cancelled.
    return 0;
  endif
  var input;

  var ritelist := {};
  if ( GetObjProperty( book, "Rites" ) )
    ritelist := GetObjProperty( book, "Rites" );
  endif

  do
    var choicelayout := { "page 0",
                          "resizepic 10 10 3600 300 140",
                          "text 130 30 500 0",
                          "gumppic 70 50 96",
                          "button 30 60 2103 2104 1 0 1",
                          "text 45 55 500 1",
                          "button 30 85 2103 2104 1 0 2",
                          "text 45 80 500 2",
                          "button 30 110 2103 2104 1 0 3",
                          "text 45 105 500 3" };
    var choicedata := { "Set Canon", "Devotion [" + GetObjProperty( book,
                        "Devotion" ) + "]", "Add Rite", "Remove Rite" };
    input := SendDialogGump( who, choicelayout, choicedata );
    input := input[0];
    if ( input == 1 )
      var Devotion := SendTextEntryGump( who, "Enter the new devotion",
                                         cancel := TE_CANCEL_DISABLE,
                                         style := TE_STYLE_NORMAL, maximum := 60 );
      SetObjProperty( book, "Devotion", Devotion );
    elseif ( input == 2 )
      var stuff := rites( who, book, "add" );
      foreach rite in ( stuff.keys )
        if ( rite > 0 )
          ritelist.append( rite );
        endif
      endforeach
      ritelist.sort();
      SetObjProperty( book, "Rites", ritelist );
    elseif ( input == 3 )
      var i;
      var stuff := rites( who, book, "remove" );
      foreach rite in ( stuff.keys )
        if ( rite > 0 )
          for ( i := 1; i <= len( ritelist ); i := i + 1 )
            if ( ritelist[i] == rite )
              ritelist.erase( i );
            endif
          endfor
        endif
      endforeach
      ritelist.sort();
      SetObjProperty( book, "Rites", ritelist );
    endif
  dowhile ( input );
endprogram

function rites( who, book, method )
  var layout := { "page 0", "noclose", "gumppic 5 5 500", "button 195 245 2076 2075 1 0 0",
                  "page 1" };
  var data := {};

  data.append( "Rites" );
  layout.append( "text 100 15 1893 " + ( len( data ) - 1 ) );
  layout.append( "gumppic 35 35 96" );

  var pagenum := 1;
  var ypos := 40;
  var leftright := "left";

  var counter := 1;
  var config := ReadConfigFile( "rites" );
  var total := GetConfigMaxIntKey( config );
  var i;
  for ( i := 1; i <= total; i := i + 1 )
    if ( devotiontype( book, riteinfo( i ) ) || method == "remove" )
      if ( method == "add" && hasrite( book, i ) )
      elseif ( method == "remove" && !hasrite( book, i ) )
      else
        if ( leftright == "left" )
          layout.append( "checkbox 40 " + ( ypos ) + " 210 211 0 " + i );
          data.append( riteinfo( i ).Level );
          layout.append( "text 60 " + ypos + " " + ritelevel( riteinfo( i ).Level
                                                              ) + " " + ( len( data ) - 1 ) );
          data.append( riteinfo( i ).Name );
          //                  layout.append("text 75 " + ypos + " 1893 " + (len(data)-1));
          layout.append( "text 75 " + ypos + " 0 " + ( len( data ) - 1 ) );
          ypos := ypos + 20;
        elseif ( leftright == "right" )
          layout.append( "checkbox 225 " + ( ypos ) + " 210 211 0 " + i );
          data.append( riteinfo( i ).Level );
          layout.append( "text 245 " + ypos + " " + ritelevel( riteinfo( i ).Level
                                                               ) + " " + ( len( data ) - 1 ) );
          data.append( riteinfo( i ).Name );
          //                  layout.append("text 260 " + ypos + " 1893 " + (len(data)-1));
          layout.append( "text 260 " + ypos + " 0 " + ( len( data ) - 1 ) );
          ypos := ypos + 20;
        endif
        if ( counter % 9 == 0 && total - counter != 0 )
          if ( leftright == "left" )
            leftright := "right";
            data.append( "Rites" );
            //                      layout.append("text 285 15 1893 " + (len(data)-1));
            layout.append( "text 285 15 0 " + ( len( data ) - 1 ) );
            layout.append( "gumppic 220 35 96" );
            ypos := 40;
          else
            pagenum := pagenum + 1;
            layout.append( "button 361 5 502 502 0 " + pagenum );
            layout.append( "gumppic 220 35 96" );
            layout.append( "page " + pagenum );
            layout.append( "button 5 5 501 501 0 " + ( pagenum - 1 ) );
            leftright := "left";
            data.append( "Rites" );
            //                      layout.append("text 100 15 1893 " + (len(data)-1));
            layout.append( "text 100 15 0 " + ( len( data ) - 1 ) );
            layout.append( "gumppic 35 35 96" );
            ypos := 40;
          endif
        endif
        counter := counter + 1;
      endif
    endif
  endfor
  var stuff := SendDialogGump( who, layout, data );
  return stuff;
endfunction

function hasrite( book, num )
  if ( num in GetObjProperty( book, "Rites" ) )
    return 1;
  else
    return 0;
  endif
endfunction

function ritelevel( number )
  case ( number )
    1:   return 1;
    2:   return 5;
    3:   return 13;
    4:   return 19;
    5:   return 26;
    6:   return 40;
    7:   return 56;
    "*": return 52;
    default: return 1893;
  endcase
endfunction

function sortrites( list )
  var leveldict := dictionary;
  foreach ritenum in list // Sort rites by level
    var level := riteinfo( ritenum ).Level;
    if ( !leveldict.exists( level ) )
      leveldict[level] := {};
    endif
    leveldict[level].append( ritenum );
  endforeach

  list := {};
  foreach level in ( leveldict.keys() )
    foreach ritenum in ( leveldict[level] )
      list.append( ritenum );
    endforeach
  endforeach
  return list;
endfunction
