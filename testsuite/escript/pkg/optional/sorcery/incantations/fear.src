use uo;
use os;
use util;

include ":attributes:attributes";
include ":magery:spells";
include "include/client";
include "include/sounds";
include ":sorcery:sorceryOpts";

program fear( parms )

  var caster := parms[1];
  var info := parms[2];
  var cast_on := parms[4];
  if ( !cast_on ) // If no cast_on then get cast_on from parms[4]. Used mostly for NPC casting.
    cast_on := MS_Target( caster, info.targ, "Select a target:",
                          TGTOPT_CHECK_LOS + TGTOPT_HARMFUL );
  endif
  if ( !cast_on )
    SendSysMessage( caster, "Cancelled.", color := 33 );
    return 0;
  endif
  if ( !MS_MobileCheck( caster, cast_on ) )
    return 0;
  endif

  if ( !cast_on.isA( POLCLASS_NPC ) )
    SendSysMessage( caster, "Aborted." );
    return 0;
  endif

  send_attack( cast_on, caster );

  var npccfg := ReadConfigFile( ":*:npcdesc" );
  if ( ( npccfg[cast_on.npctemplate].nofear ) ||
       ( npccfg[cast_on.npctemplate].nopsych ) )
    SendSysMessage( caster, "Your spell has no effect." );
    PlaySoundEffect( caster, 0x005d );
    PlayObjectCenteredEffect( caster, 0x3735, 0x0a, 0x1e );
    return 0;
  endif

  var resistcheck := CInt( AP_GetStat( cast_on, INTELLIGENCE )
                         + AP_GetSkill( cast_on, RESISTING_SPELLS )
                         - AP_GetSkill( caster, MAGERY )
                         - AP_GetSkill( caster, EVALUATING_INTELLIGENCE ) );
  if ( resistcheck < 0 )
    resistcheck := 0;
  endif

  if ( RandomInt( 100 ) <= resistcheck )
    SendSysMessage( caster, "Your spell fails." );
    PlaySoundEffect( caster, 0x005d );
    PlayObjectCenteredEffect( caster, 0x3735, 0x0a, 0x1e );
    return 0;
  endif

  SetObjProperty( cast_on, "Turner", caster.serial );
  SetObjProperty( cast_on, "RegularScript", cast_on.script );
  cast_on.script := "turnedundead";
  RestartScript( cast_on );
  PrintTextAbove( cast_on, CStr( cast_on.name ) + " flees in terror!" );
  PlaySoundEffect( cast_on, SFX_SPELL_WEAKEN );
  PlayObjectCenteredEffect( cast_on, FX_CURSE_EFFECT, 10, 10 );

  Detach();
  Sleep( CInt( ( AP_GetStat( caster, INTELLIGENCE ) / 2 ) + RandomInt( AP_GetStat( caster,
                                                                                   INTELLIGENCE ) )
               ) );
  cast_on.script := GetObjProperty( cast_on, "RegularScript" );
  RestartScript( cast_on );
  EraseObjProperty( cast_on, "Turner" );
  EraseObjProperty( cast_on, "RegularScript" );

endprogram
