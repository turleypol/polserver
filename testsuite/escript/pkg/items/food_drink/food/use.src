// //$Id: use.src 1027 2007-03-21 14:14:25Z tekproxy $

use uo;
use os;
use util;
use cliloc;
use cfgfile;

include ":attributes:attributes";
include ":timedScripts:timedScripts";
include ":itemutils:itemdesc";
include "include/client";

program eat( who, food )
  if ( food.movable == 0 )
    SendSysMessage( who, "You cannot use that." );
    return 0;
  elseif ( !ReserveItem( food ) )
    SendSysMessage( who, "Someone else is already using that." );
    return 0;
  endif
  var magiceffect := {};
  magiceffect := GetObjTypeArray( food.objtype, "MagicEffect" );
  var food_objtype := food.objtype;
  var cfg_elem := GetItemDescInfo( food.objtype );
  var themsg := 500867; // You are simply too full to eat any more!
  var strength := CInt( GetObjProperty( food, "PoisonStrength" ) );
  var duration := CInt( GetObjProperty( food, "duration" ) );

  var foodvalue := CInt( cfg_elem.foodvalue );

  var hunger := CInt( AP_GetVital( who, "Hunger" ) );
  if ( !foodvalue )
    foodvalue := 1;
  endif
  if ( hunger >= 10 )
    SendSysMessageCL( who, 500867, color := 33 ); // You are simply too full to eat any more!
    return 0;
  endif

  if ( !SubtractAmount( food, 1 ) )
    SendSysMessage( who, "Error - unable to subtract 1 from item." );
    return 0;
  endif

  // If player eats form a triple muffin, create the two left over.
  if ( food_objtype == 0x9EB )
    CreateItemInBackpack( who, 0x9EA, 2 );
  endif

  case ( RandomInt( 3 ) + 1 )
    1: PlaySoundEffect( who, 0x3b ); break;
    2: PlaySoundEffect( who, 0x3c ); break;
    3: PlaySoundEffect( who, 0x3d ); break;
  endcase

  PerformAction( who, ANIM_EAT );
  AP_SetVital( who, "Stamina", AP_GetVital( who, "Stamina" )
             + ( RandomInt( 5 ) + foodvalue ) );

  // Hunger range is 10 which is full through 0 which is famished.
  hunger := hunger + foodvalue;
  // Messages are cliloc numbers
  var hue := 66;
  case ( hunger )
    9:
      themsg := 500872;
      hue := 66; // You manage to eat the food, but you are stuffed!
      break;
    8:
    7:
      themsg := 500871;
      hue := 66; // You feel quite full after consuming the food.
      break;
    6:
    5:
      themsg := 500870;
      hue := 56; // After eating the food, you feel much less hungry.
      break;
    4:
    3:
      themsg := 500869;
      hue := 44; // You eat the food, and begin to feel more satiated.
      break;
    2:
    1:
    0:
      themsg := 500868;
      hue := 33; // You eat the food, but are still extremely hungry.
      break;
  endcase

  SendSysMessageCL( who, themsg, color := hue );

  AP_SetVital( who, "Hunger", hunger );

  var regen := AP_GetVitalRegenRateMod( who, STAMINA );
  // Hunger range is 10 which is full through 0 which is famished.
  case ( hunger )
    10: regen := regen - 200; break;
    9:  regen := regen + 100; break;
    8:  regen := regen + 0; break;
    7:  regen := regen + 0; break;
    6:  regen := regen + 0; break;
    5:  regen := regen + 0; break;
    4:  regen := regen + 0; break;
    3:  regen := regen - 100; break;
    2:  regen := regen - 400; break;
    1:  regen := regen - 600; break;
    0:  regen := regen - 800; break;
  endcase
  AP_ModifyVitalRegenRateMod( who, STAMINA, regen );

  //  Print(CStr(modinfo.size()));
  //  SendSysMessage(who, modinfo[1] + " " + modinfo[2] + " " + modinfo[3] + " " + modinfo[4], color := 88);
  if ( magiceffect.size() > 0 )
    case ( magiceffect[1] )
      "Timer":
        TS_StartTimer( who, magiceffect[2], CInt( magiceffect[4] ),
                       CInt( magiceffect[3] ) );
      default:
    endcase
  endif

  if ( strength > 0 )
    TS_StartTimer( who, "DefaultPoison", duration, strength );
  endif

  return 1;
endprogram
