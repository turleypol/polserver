use uo;
use os;
use polsys;
use util;

include ":bulletinboard:settings";

program bulletin_board_use( parameters, bulletin_board )

  // Kept here for testing purposes.
  // EraseObjProperty( parameters[1], "#NextBBPost" );
  // EraseObjProperty( parameters[1], "#NextBBReply" );
  case ( parameters[1] )
    3: BBRequestContent( parameters[2], parameters[3], parameters[4] );
    4: BBRequestHeader( parameters[2], parameters[3], parameters[4] );
    5: BBPostMessage( parameters[2], parameters[3] );
    default:
      CheckExpiredMessages( bulletin_board );
      BBDisplay( parameters[1], bulletin_board );
  endcase

  return 1;
endprogram

function BBPacketInit( byref packet_size, byref sub_command )
  var packet := CreatePacket( 0x71, packet_size );
  packet.SetInt16( 1, packet_size );
  packet.SetInt8( 3, sub_command );

  return packet;
endfunction

function BBDisplay( byref mobile, byref bulletin_board )
  var items := EnumerateItemsInContainer( bulletin_board ),
      packet := BBPacketInit( 38, 0 );

  packet.SetInt32( 4, bulletin_board.serial );
  packet.SetString( 8, bulletin_board.desc, 0 );
  packet.SetInt32( 29, 0 ); // This seems to be really just an unknown
  packet.SetInt32( 34, 0 ); // This seems to be really just an unknown
  packet.SendPacket( mobile );

  /*
   Packet: 0x3C
   Sent By: Server
   Size: Variable

   Packet Build
   BYTE[1] cmd
   BYTE[2] packet length
   BYTE[2] number of Items to add
   loop items:

       BYTE[4] item serial
       BYTE[2] item ID (objtype)
       BYTE[1] unknown (0x00)
       BYTE[2] item amount (stack)
       BYTE[2] xLoc
       BYTE[2] yLoc
       BYTE[1] Backpack grid index (see notes)
       BYTE[4] Container serial
       BYTE[2] item color

   endloop
*/
  packet := CreatePacket( 0x3C, MSGLEN_VARIABLE );
  packet.SetInt16( 3, items.Size() );
  foreach item in ( items )
    packet.SetInt32( packet.GetSize(), item.serial );
    packet.SetInt16( packet.GetSize(), item.graphic );
    packet.SetInt8( packet.GetSize(), 1 );
    packet.SetInt16( packet.GetSize(), 1 );
    packet.SetInt16( packet.GetSize(), 0 );
    packet.SetInt16( packet.GetSize(), 0 );
    packet.SetInt32( packet.GetSize(), bulletin_board.serial );
    packet.SetInt16( packet.GetSize(), item.color );
  endforeach
  packet.SendPacket( mobile );

  return 1;
endfunction

function CheckExpiredMessages( byref bulletin_board )
  var check_time := 0;

  foreach item in ( EnumerateItemsInContainer( bulletin_board ) )
    if ( !item )
      continue;
    endif

    check_time := GetObjProperty( item, "LastPostTime" );
    if ( ( check_time ) && check_time < ReadGameClock() )
      DestroyItem( item );
      continue;
    endif
  endforeach

  return 1;
endfunction

/*
   The following functions are called by the case statement in the main body of the program
   which is accessed via the client sent packets.
*/
function BBRequestContent( byref mobile, byref bulletin_board, byref message )
  var packet := BBPacketInit( MSGLEN_VARIABLE, 2 ),
      bb_settings := BB_GetSettingsCfgElem( "SystemBulletinBoardSettings" ),
      viewing_refreshes_post := CInt( bb_settings.ViewingRefreshesThread ),
      thread := 0;

  packet.SetInt32( 4, bulletin_board.serial );
  packet.SetInt32( 8, message.serial );
  packet.SetInt8( 12, Len( message.GetProp( "Author" ) ) + 1 );
  packet.SetString( 13, message.GetProp( "Author" ), 1 );
  packet.SetInt8( packet.GetSize(), Len( message.GetProp( "Title" ) ) + 1 );
  packet.SetString( packet.GetSize(), message.GetProp( "Title" ), 1 );
  packet.SetInt8( packet.GetSize(), Len( message.GetProp( "Time" ) ) + 1 );
  packet.SetString( packet.GetSize(), message.GetProp( "Time" ), 1 );
  packet.SetInt16( packet.GetSize(), 0 ); // Body
  packet.SetInt16( packet.GetSize(), 0 ); // Hue
  packet.SetInt8( packet.GetSize(), 0 ); // Items
  packet.SetInt8( packet.GetSize(), Len( message.GetProp( "Text" ) ) );

  foreach line in ( message.GetProp( "Text" ) )
    line := line + " ";
    packet.SetInt8( packet.GetSize(), Len( line ) + 1 );
    packet.SetString( packet.GetSize(), line, 1 );
  endforeach

  if ( viewing_refreshes_post )
    thread := GetObjProperty( message, "Reply" );
    if ( thread )
      thread := SystemFindObjectBySerial( CInt( thread ) );
      thread.SetLastActivity();
    endif
  endif

  return packet.SendPacket( mobile );
endfunction

function BBRequestHeader( byref mobile, byref bulletin_board, byref message )

  var packet := BBPacketInit( MSGLEN_VARIABLE, 1 );
  packet.SetInt32( 4, bulletin_board.serial );
  packet.SetInt32( 8, message.serial );
  packet.SetInt32( 12, message.GetProp( "Reply" ) );
  packet.SetInt8( 16, Len( message.GetProp( "Author" ) ) + 1 );
  packet.SetString( 17, message.GetProp( "Author" ), 1 );
  packet.SetInt8( packet.GetSize(), Len( message.GetProp( "Title" ) ) + 1 );
  packet.SetString( packet.GetSize(), message.GetProp( "Title" ), 1 );
  packet.SetInt8( packet.GetSize(), Len( message.GetProp( "Time" ) ) + 1 );
  packet.SetString( packet.GetSize(), message.GetProp( "Time" ), 1 );

  return packet.SendPacket( mobile );
endfunction

function BBPostMessage( byref mobile, byref packet )
  /*
   Subcommand 5 - Post a message (Client)
   BYTE[4] BoardID
   BYTE[4] Replying to ID (0 if this is a top level / non-reply post)
   BYTE[1] subjectLen (length of the subject, includes null termination)
   BYTE[subjectLen] subject (null terminated)
   BYTE[1] numlines
   For each line:

    BYTE linelen
    BYTE[linelen] body (null terminated)
*/

  var text := array,
      i := 1,
      j := 1,
      date := StrFormatTime( "%Y.%m.%d @ %H:%M", 0 ),
      bb_settings := BB_GetSettingsCfgElem( "SystemBulletinBoardSettings" ),
      next_post := CInt( bb_settings.TimeTilNextThread ),
      next_reply := CInt( bb_settings.TimeTilNextReply ),
      bulletin_board := SystemFindObjectBySerial( packet.GetInt32( 4 ) ),
      replying := CInt( packet.GetInt32( 8 ) ),
      lines := 13 + packet.GetInt8( 12 ),
      title := CStr( packet.GetString( 13, packet.GetInt8( 12 ) - 1 ) );

  for ( i := 1; i <= packet.GetInt8( lines ); i := i + 1 )
    text.append( packet.GetString( lines + 1 + j, packet.GetInt8( lines + j ) - 1 ) );
    j := j + packet.GetInt8( lines + j ) + 1;
  endfor

  var message := GetItemDescriptor( 0xFFFE );
  message.CProps.Insert( "Text", text );
  message.CProps.Insert( "Author", mobile.name );
  message.CProps.Insert( "Reply", replying );
  message.CProps.insert( "Time", date );
  if ( packet.GetInt8( 12 ) )
    message.CProps.Insert( "Title", title );
    message.Desc := title;
  else
    message.CProps.Insert( "Title", "" );
  endif

  message := CreateItemInContainer( bulletin_board, message, 1 );
  if ( message.errortext )
    SendSysMessage( mobile, "Error posting message: " + message.errortext, 0x3,
                    0x32 );
  endif

  if ( replying )
    var thread := SystemFindObjectBySerial( CInt( replying ) ),
        title := GetObjProperty( thread, "Title" );
    SendSysMessage( mobile, "You have posted a reply to: " + title, 0x3, 0x42 );
    thread.SetLastActivity();
    thread.AddReply( message );
    SetObjProperty( mobile, "#NextBBReply", ReadGameClock() + next_reply );
  else
    SendSysMessage( mobile, "Your note has been pinned to the bulletin board.",
                    0x3, 0x42 );
    message.SetLastActivity();
    SetObjProperty( mobile, "#NextBBPost", ReadGameClock() + next_post );
  endif

  return 1;
endfunction

// This is technically not the right manner of date and time needed
// but I was too lazy to try to figure out the proper manner needed.
// According to docs the date string should look something like this:
// "Day 1 @ 11:28"
function TIME_GetReadableString()
/*
   var MonthDays := array{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

   //Seconds since 1/1/1970
   var systime := polcore().systime;

   //Lets skip ahead to y2k
   systime := systime - 946684800;

   //convert to days
   var days := CInt( systime / 86400 ) + 1;

   var current_year_counter := 0;
   var current_month_counter := 1;
   var days_in_month, done := 0;

   repeat
       if( current_month_counter == 2 )
           if( current_year_counter % 4 == 0 )
               days_in_month := 29;
           else
               days_in_month := 28;
           endif
       else
           days_in_month := MonthDays[current_month_counter];
       endif

       if( days_in_month <= days )
           days := days - days_in_month;
           current_month_counter := current_month_counter + 1;
           if( current_month_counter > 12 )
               current_month_counter := 1;
               current_year_counter := current_year_counter + 1;
           endif
       else
           done := 1;
       endif

                SleepMS(2);
   until( done );

   if( days < 10 )
       days := "0"+days;
   endif

   if( current_month_counter < 10 )
       current_month_counter := "0"+current_month_counter;
   endif

   // var timestring := current_month_counter+" "+days+", "+( 2000 + current_year_counter );
   var timestring := ( 2000 + current_year_counter )+"."+current_month_counter+"."+days;

   //now figure out hours and minutes
   systime := polcore().systime;
   systime := CInt( systime % 86400 );
   var hour := CInt( systime / 3600 );

   systime := polcore().systime;
   systime := CInt( systime % 3600 );
   var minute := CInt( systime / 60 );


   systime := polcore().systime;
   var second := CInt( systime % 60 );
   // var second := CInt( systime % 60 );

   if( hour == 0 )
       hour := 24;
   elseif( hour < 10 )
       hour := "0"+hour;
   endif

   if( minute < 10 )
       minute := "0"+minute;
   endif

   if( second < 10 )
       second := "0"+second;
   endif

   timestring := timestring+" "+hour+":"+minute+":"+second;

   return timestring;
*/
endfunction
