/////////////////////////////////////////////////////////////
// SETPROP.SRC
//
// Author: DC
// Date: 2/14/99
//
// Description: An GM text command that changes the value
//    of the given inherent property. Note that
//    mobiles have more props than items &&
//    some properties are read-only.
//
// Syntax: .setprop <propname> <value>
// program textcmd_setprop: params: character using
//                text
//            Splits the param text into 2
//            strings (propname && value)
//                    passes the given prop &&
//            value to SetObjctProp &&
//            prints the old && new values
//            if the write was successful.
//
// function SetObjctProp: Matches the given text to one of
//          the known properties of the
//          targetted object. If the prop
//          name could not be matched, it
//          throws an uninitialized error
//          which the main program catches.
//          only writable props are listed.
//
// TODO: Give access to props setable only with
//   "SetObjectProperty" function.
//
//   ********
//   **NOTE**: to change an object's name, use "rename" cmd
//   ********
// updated by zulu (zulu@cadvision.com)
// updated by Shilohen (shilohen@sympatico.ca)
// n.b. Some properties for items weren't tested as the
// walkonscript but those will be there in case of future
// core changes.
/////////////////////////////////////////////////////////////

use uo;
use basic;
use os;

include ":attributes:attributes";

program textcmd_setprop( who, text )

  var props := SplitWords( text );
  if ( !props[1] )
    SendSysmessage( who, "Syntax: .setprop [propname] [amount]" );
  elseif ( !props[2] )
    SendSysmessage( who, "Syntax: .setprop [propname] [amount]" );
  endif

  var propname := props[1];
  var amount := Cint( props[2] );
  var amount_str := Cstr( text - ( propname + " " ) );

  if ( amount == 9999 )
    amount := 0;
    amount_str := "";
  endif

  SendSysMessage( who, "Select an object" );
  var obj := Target( who );
  if ( !obj )
    return 0;
  endif

  SetScriptController( who );

  if ( obj.IsA( POLCLASS_MOBILE ) )
    ProcessMobileSetProp( who, obj, propname, amount, amount_str );
  else
    ProcessItemSetProp( who, obj, propname, amount, amount_str );
  endif

endprogram

function ProcessMobileSetProp( who, mobile, propname, amount, amount_str )

  var old_value := GetMobileProp( mobile, propname );
  if ( !old_value )
    SendSysMessage( who, "This property don't exist for mobiles." );
    return 0;
  endif

  SendSysmessage( who, propname + " was: " + old_value );

  if ( SetMobileProp( mobile, propname, amount, amount_str ) )
    var new_value := GetMobileProp( mobile, propname );
    if ( new_value == old_value )
      if ( propname != "lightlevel" )
        SendSysMessage( who, "Property unchanged." );
      else
        SendSysMessage( who, new_value );
      endif
    else
      SendSysmessage( who, propname + " is now: " + new_value );
    endif
  else
    SendSysmessage( who, "Could not write to " + propname + "." );
  endif

  return 1;

endfunction

function ProcessItemSetProp( who, item, propname, amount, amount_str )

  var old_value := GetItemProp( item, propname );
  if ( !old_value )
    SendSysMessage( who, "This property don't exist for items." );
    return 0;
  endif

  SendSysmessage( who, propname + " was: " + old_value );

  if ( SetItemProp( item, propname, amount, amount_str ) )
    var new_value := GetItemProp( item, propname );
    if ( new_value == old_value )
      if ( propname != "lightlevel" )
        SendSysMessage( who, "Property unchanged." );
      else
        SendSysMessage( who, new_value );
      endif
    else
      SendSysmessage( who, propname + " is now: " + new_value );
    endif
  else
    SendSysmessage( who, "Could not write to " + propname + "." );
  endif

  return 1;

endfunction

function GetMobileProp( mobile, propname )

  var retstr;
  case ( propname )
    "x":                       retstr := mobile.x; break;
    "y":                       retstr := mobile.y; break;
    "z":                       retstr := mobile.z; break;
    "trueobjtype":             retstr := Hex( mobile.trueobjtype ); break;
    "color":                   retstr := mobile.color; break;
    "truecolor":               retstr := mobile.truecolor; break;
    "facing":                  retstr := mobile.facing; break;
    "name":                    retstr := mobile.name; break;
    "warmode":                 retstr := mobile.warmode; break;
    "gender":                  retstr := mobile.gender; break;
    "hp":                      retstr := AP_GetVital( mobile, VITALID_LIFE ); break;
    "mana":                    retstr := AP_GetVital( mobile, VITALID_MANA ); break;
    "stamina":                 retstr := AP_GetVital( mobile, VITALID_STAMINA ); break;
    "strength":                retstr := AP_GetStat( mobile, STRENGTH ); break;
    "dexterity":               retstr := AP_GetStat( mobile, DEXTERITY ); break;
    "intelligence":            retstr := AP_GetStat( mobile, INTELLIGENCE ); break;
    "strmod":                  retstr := AP_GetStatMod( mobile, STRENGTH ); break;
    "intmod":                  retstr := AP_GetStatMod( mobile, INTELLIGENCE ); break;
    "dexmod":                  retstr := AP_GetStatMod( mobile, DEXTERITY ); break;
    "armod":                   retstr := mobile.ar_mod; break;
    "graphic":                 retstr := mobile.graphic; break;
    "poisoned":                retstr := mobile.poisoned; break;
    "paralyzed":               retstr := mobile.paralyzed; break;
    "hidden":                  retstr := mobile.hidden; break;
    "concealed":               retstr := mobile.concealed; break;
    "frozen":                  retstr := mobile.frozen; break;
    "stealthsteps":            retstr := mobile.stealthsteps; break;
    "squelched":               retstr := mobile.squelched; break;
    "lightlevel":              retstr := "Can't read personnal light level"; break;
    "title_guild":             retstr := mobile.title_guild; break;
    "title_prefix":            retstr := mobile.title_prefix; break;
    "title_suffix":            retstr := mobile.title_suffix; break;
    "title_race":              retstr := mobile.title_race; break;
    "criminal":                retstr := mobile.criminal; break;
    "murderer":                retstr := mobile.murderer; break;
    "ar_mod":                  retstr := mobile.ar_mod; break;
    "carrying_capacity_mod":   retstr := mobile.carrying_capacity_mod; break;
    "cmdlevel":                retstr := mobile.cmdlevel; break;
    "damage_cold_mod":         retstr := mobile.damage_cold_mod; break;
    "damage_energy_mod":       retstr := mobile.damage_energy_mod; break;
    "damage_fire_mod":         retstr := mobile.damage_fire_mod; break;
    "damage_physical_mod":     retstr := mobile.damage_physical_mod; break;
    "damage_poison_mod":       retstr := mobile.damage_poison_mod; break;
    "defence_increase_cap_mod":
      retstr := mobile.defence_increase_cap_mod;
      break;
    "defence_increase_mod":    retstr := mobile.defence_increase_mod; break;
    "delay_mod":               retstr := mobile.delay_mod; break;
    "evasionchance_mod":       retstr := mobile.evasionchance_mod; break;
    "faster_cast_recovery_mod":
      retstr := mobile.faster_cast_recovery_mod;
      break;
    "faster_casting_mod":      retstr := mobile.faster_casting_mod; break;
    "followers":               retstr := mobile.followers; break;
    "followers_max":           retstr := mobile.followers_max; break;
    "hit_chance_mod":          retstr := mobile.hit_chance_mod; break;
    "lower_mana_cost_mod":     retstr := mobile.lower_mana_cost_mod; break;
    "lower_reagent_cost_mod":  retstr := mobile.lower_reagent_cost_mod; break;
    "luck_mod":                retstr := mobile.luck_mod; break;
    "mountedsteps":            retstr := mobile.mountedsteps; break;
    "movecost_run_mod":        retstr := mobile.movecost_run_mod; break;
    "movecost_run_mounted_mod":
      retstr := mobile.movecost_run_mounted_mod;
      break;
    "movecost_walk_mod":       retstr := mobile.movecost_walk_mod; break;
    "movecost_walk_mounted_mod":
      retstr := mobile.movecost_walk_mounted_mod;
      break;
    "race":                    retstr := mobile.race; break;
    "resist_cold_cap_mod":     retstr := mobile.resist_cold_cap_mod; break;
    "resist_cold_mod":         retstr := mobile.resist_cold_mod; break;
    "resist_energy_cap_mod":   retstr := mobile.resist_energy_cap_mod; break;
    "resist_energy_mod":       retstr := mobile.resist_energy_mod; break;
    "resist_fire_cap_mod":     retstr := mobile.resist_fire_cap_mod; break;
    "resist_fire_mod":         retstr := mobile.resist_fire_mod; break;
    "resist_physical_cap_mod": retstr := mobile.resist_physical_cap_mod; break;
    "resist_physical_mod":     retstr := mobile.resist_physical_mod; break;
    "resist_poison_cap_mod":   retstr := mobile.resist_poison_cap_mod; break;
    "resist_poison_mod":       retstr := mobile.resist_poison_mod; break;
    "skillcap":                retstr := mobile.skillcap; break;
    "spell_damage_increase_mod":
      retstr := mobile.spell_damage_increase_mod;
      break;
    "statcap":                 retstr := mobile.statcap; break;
    "tithing":                 retstr := mobile.tithing; break;
    "swing_speed_increase_mod":
      retstr := mobile.swing_speed_increase_mod;
      break;
    default:                   retstr := error;
  endcase

  if ( retstr != error )
    return Cstr( retstr );
  else
    return retstr;
  endif

endfunction

function SetMobileProp( mobile, propname, amount, amount_str )

  var ret := 1;
  case ( propname )
    "x":
      ret := MoveObjectToLocation( mobile, amount, mobile.y, mobile.z,
                                   mobile.realm, MOVEOBJECT_FORCELOCATION );
      break;
    "y":
      ret := MoveObjectToLocation( mobile, mobile.x, amount, mobile.z,
                                   mobile.realm, MOVEOBJECT_FORCELOCATION );
      break;
    "z":
      ret := MoveObjectToLocation( mobile, mobile.x, mobile.y, amount,
                                   mobile.realm, MOVEOBJECT_FORCELOCATION );
      break;
    "trueobjtype":             mobile.trueobjtype := amount; break;
    "color":                   mobile.color := amount; break;
    "truecolor":               mobile.truecolor := amount; break;
    "facing":                  mobile.facing := amount; break;
    "name":                    mobile.name := amount_str; break;
    "warmode":                 mobile.warmode := amount; break;
    "gender":                  mobile.gender := amount; break;
    "hp":                      ret := AP_SetVital( mobile, VITALID_LIFE, amount ); break;
    "mana":                    ret := AP_SetVital( mobile, VITALID_MANA, amount ); break;
    "stamina":                 ret := AP_SetVital( mobile, VITALID_STAMINA, amount ); break;
    "strength":                ret := AP_SetTrueStat( mobile, STRENGTH, amount ); break;
    "dexterity":               ret := AP_SetTrueStat( mobile, DEXTERITY, amount ); break;
    "intelligence":
      ret := AP_SetTrueStat( mobile, INTELLIGENCE, amount );
      break;
    "strmod":                  ret := AP_SetStatMod( mobile, STRENGTH, amount ); break;
    "intmod":                  ret := AP_SetStatMod( mobile, INTELLIGENCE, amount ); break;
    "dexmod":                  ret := AP_SetStatMod( mobile, DEXTERITY, amount ); break;
    "armod":                   mobile.ar_mod := amount; break;
    "graphic":                 mobile.graphic := amount; break;
    "hidden":                  mobile.hidden := amount; break;
    "concealed":               mobile.concealed := amount; break;
    "frozen":                  mobile.frozen := amount; break;
    "stealthsteps":            mobile.stealthsteps := amount; break;
    //      "poisoned": mobile.SetPoisoned(amount);         break;
    "paralyzed":               mobile.SetParalyzed( amount ); break;
    "squelched":               mobile.Squelch( amount ); break;
    "criminal":                mobile.SetCriminal( amount ); break;
    "murderer":                mobile.SetMurderer( amount ); break;
    "title_guild":             mobile.title_guild := amount_str; break;
    "title_prefix":            mobile.title_prefix := amount_str; break;
    "title_suffix":            mobile.title_suffix := amount_str; break;
    "title_race":              mobile.title_race := amount_str; break;
    "lightlevel":
      amount_str := SplitWords( amount_str );
      mobile.SetLightLevel( Cint( amount_str[1] ), Cint( amount_str[2] ) );
      break;
    "ar_mod":                  mobile.ar_mod := amount; break;
    "carrying_capacity_mod":   mobile.carrying_capacity_mod := amount; break;
    "cmdlevel":                mobile.cmdlevel := amount; break;
    "damage_cold_mod":         mobile.damage_cold_mod := amount; break;
    "damage_energy_mod":       mobile.damage_energy_mod := amount; break;
    "damage_fire_mod":         mobile.damage_fire_mod := amount; break;
    "damage_physical_mod":     mobile.damage_physical_mod := amount; break;
    "damage_poison_mod":       mobile.damage_poison_mod := amount; break;
    "defence_increase_cap_mod":
      mobile.defence_increase_cap_mod := amount;
      break;
    "defence_increase_mod":    mobile.defence_increase_mod := amount; break;
    "delay_mod":               mobile.delay_mod := amount; break;
    "evasionchance_mod":       mobile.evasionchance_mod := amount; break;
    "faster_cast_recovery_mod":
      mobile.faster_cast_recovery_mod := amount;
      break;
    "faster_casting_mod":      mobile.faster_casting_mod := amount; break;
    "followers":               mobile.followers := amount; break;
    "followers_max":           mobile.followers_max := amount; break;
    "hit_chance_mod":          mobile.hit_chance_mod := amount; break;
    "lower_mana_cost_mod":     mobile.lower_mana_cost_mod := amount; break;
    "lower_reagent_cost_mod":  mobile.lower_reagent_cost_mod := amount; break;
    "luck_mod":                mobile.luck_mod := amount; break;
    "mountedsteps":            mobile.mountedsteps := amount; break;
    "movecost_run_mod":        mobile.movecost_run_mod := amount; break;
    "movecost_run_mounted_mod":
      mobile.movecost_run_mounted_mod := amount;
      break;
    "movecost_walk_mod":       mobile.movecost_walk_mod := amount; break;
    "movecost_walk_mounted_mod":
      mobile.movecost_walk_mounted_mod := amount;
      break;
    "race":                    mobile.race := amount; break;
    "resist_cold_cap_mod":     mobile.resist_cold_cap_mod := amount; break;
    "resist_cold_mod":         mobile.resist_cold_mod := amount; break;
    "resist_energy_cap_mod":   mobile.resist_energy_cap_mod := amount; break;
    "resist_energy_mod":       mobile.resist_energy_mod := amount; break;
    "resist_fire_cap_mod":     mobile.resist_fire_cap_mod := amount; break;
    "resist_fire_mod":         mobile.resist_fire_mod := amount; break;
    "resist_physical_cap_mod": mobile.resist_physical_cap_mod := amount; break;
    "resist_physical_mod":     mobile.resist_physical_mod := amount; break;
    "resist_poison_cap_mod":   mobile.resist_poison_cap_mod := amount; break;
    "resist_poison_mod":       mobile.resist_poison_mod := amount; break;
    "skillcap":                mobile.skillcap := amount; break;
    "spell_damage_increase_mod":
      mobile.spell_damage_increase_mod := amount;
      break;
    "statcap":                 mobile.statcap := amount; break;
    "tithing":                 mobile.tithing := amount; break;
    "swing_speed_increase_mod":
      mobile.swing_speed_increase_mod := amount;
      break;
    default:                   ret := error;
  endcase

  return ret;

endfunction

function GetItemProp( item, propname )

  var retstr;
  case ( propname )
    "x":                        retstr := item.x; break;
    "y":                        retstr := item.y; break;
    "z":                        retstr := item.z; break;
    "color":                    retstr := item.color; break;
    "facing":                   retstr := item.facing; break;
    "name":                     retstr := item.name; break;
    "desc":                     retstr := item.desc; break;
    "hp":                       retstr := item.hp; break;
    "ar_mod":                   retstr := item.ar_mod; break;
    "graphic":                  retstr := item.graphic; break;
    "usescript":                retstr := item.usescript; break;
    "equipscript":              retstr := item.equipscript; break;
    "unequipscript":            retstr := item.unequipscript; break;
    "newbie":                   retstr := item.newbie; break;
    "movable":                  retstr := item.movable; break;
    "decayat":                  retstr := item.decayat; break;
    "maxhp_mod":                retstr := item.maxhp_mod; break;
    "quality":                  retstr := item.quality; break;
    "ar_base":                  retstr := item.ar_base; break;
    "hitscript":                retstr := item.hitscript; break;
    "dmg_mod":                  retstr := item.dmg_mod; break;
    "controlscript":            retstr := item.controlscript; break;
    "walkonscript":             retstr := item.walkonscript; break;
    "invisible":                retstr := item.invisible; break;
    "buyprice":                 retstr := item.buyprice; break;
    "insured":                  retstr := item.insured; break;
    "no_drop":                  retstr := item.no_drop; break;
    "saveonexit":               retstr := item.saveonexit; break;
    "sellprice":                retstr := item.sellprice; break;
    "speed_mod":                retstr := item.speed_mod; break;
    "onhitscript":              retstr := item.onhitscript; break;
    "locked":                   retstr := item.locked; break;
    "max_items_mod":            retstr := item.max_items_mod; break;
    "max_slots_mod":            retstr := item.max_slots_mod; break;
    "max_weight_mod":           retstr := item.max_weight_mod; break;
    "no_drop_exception":        retstr := item.no_drop_exception; break;
    "editable":                 retstr := item.editable; break;
    "facetid":                  retstr := item.facetid; break;
    "gumpheight":               retstr := item.gumpheight; break;
    "gumpwidth":                retstr := item.gumpwidth; break;
    "xeast":                    retstr := item.xeast; break;
    "xwest":                    retstr := item.xwest; break;
    "ynorth":                   retstr := item.ynorth; break;
    "ysouth":                   retstr := item.ysouth; break;
    "damage_cold_mod":          retstr := item.damage_cold_mod; break;
    "damage_energy_mod":        retstr := item.damage_energy_mod; break;
    "damage_fire_mod":          retstr := item.damage_fire_mod; break;
    "damage_physical_mod":      retstr := item.damage_physical_mod; break;
    "damage_poison_mod":        retstr := item.damage_poison_mod; break;
    "defence_increase_cap_mod": retstr := item.defence_increase_cap_mod; break;
    "defence_increase_mod":     retstr := item.defence_increase_mod; break;
    "faster_cast_recovery_mod": retstr := item.faster_cast_recovery_mod; break;
    "faster_casting_mod":       retstr := item.faster_casting_mod; break;
    "hit_chance_mod":           retstr := item.hit_chance_mod; break;
    "lower_mana_cost_mod":      retstr := item.lower_mana_cost_mod; break;
    "lower_reagent_cost_mod":   retstr := item.lower_reagent_cost_mod; break;
    "luck_mod":                 retstr := item.luck_mod; break;
    "resist_cold_cap_mod":      retstr := item.resist_cold_cap_mod; break;
    "resist_cold_mod":          retstr := item.resist_cold_mod; break;
    "resist_energy_cap_mod":    retstr := item.resist_energy_cap_mod; break;
    "resist_energy_mod":        retstr := item.resist_energy_mod; break;
    "resist_fire_cap_mod":      retstr := item.resist_fire_cap_mod; break;
    "resist_fire_mod":          retstr := item.resist_fire_mod; break;
    "resist_physical_cap_mod":  retstr := item.resist_physical_cap_mod; break;
    "resist_physical_mod":      retstr := item.resist_physical_mod; break;
    "resist_poison_cap_mod":    retstr := item.resist_poison_cap_mod; break;
    "resist_poison_mod":        retstr := item.resist_poison_mod; break;
    "spell_damage_increase_mod":
      retstr := item.spell_damage_increase_mod;
      break;
    "swing_speed_increase_mod": retstr := item.swing_speed_increase_mod; break;
    default:                    retstr := error;
  endcase

  if ( retstr != error )
    return Cstr( retstr );
  else
    return retstr;
  endif

endfunction

function SetItemProp( item, propname, amount, amount_str )

  var ret := 1;
  case ( propname )
    "x":
      ret := MoveObjectToLocation( item, amount, item.y, item.z, item.realm,
                                   MOVEOBJECT_FORCELOCATION );
      break;
    "y":
      ret := MoveObjectToLocation( item, item.x, amount, item.z, item.realm,
                                   MOVEOBJECT_FORCELOCATION );
      break;
    "z":
      ret := MoveObjectToLocation( item, item.x, item.y, amount, item.realm,
                                   MOVEOBJECT_FORCELOCATION );
      break;
    "color":                    item.color := amount; break;
    "facing":                   item.facing := amount; break;
    "name":                     item.name := amount; break;
    "desc":                     item.desc := amount; break;
    "hp":                       item.hp := amount; break;
    "ar_mod":                   item.ar_mod := amount; break;
    "graphic":                  item.graphic := amount; break;
    "newbie":                   item.newbie := amount; break;
    "movable":                  item.movable := amount; break;
    "decayat":                  item.decayat := amount; break;
    "maxhp_mod":                item.maxhp_mod := amount; break;
    "ar_base":                  item.ar_base := amount; break;
    "dmg_mod":                  item.dmg_mod := amount; break;
    "invisible":                item.invisible := amount; break;
    "buyprice":                 item.buyprice := amount; break;
    "hitscript":                item.hitscript := amount_str; break;
    "usescript":                item.usescript := amount_str; break;
    "equipscript":              item.equipscript := amount_str; break;
    "walkonscript":             item.walkonscript := amount_str; break;
    "unequipscript":            item.unequipscript := amount_str; break;
    "controlscript":            item.controlscript := amount_str; break;
    "quality":
      amount_str := SplitWords( amount_str );
      amount := Cdbl( amount_str[1] );
      if ( amount > 0.0 )
        item.quality := amount;
      endif
      break;
    "insured":                  item.insured := amount; break;
    "no_drop":                  item.no_drop := amount; break;
    "saveonexit":               item.saveonexit := amount; break;
    "sellprice":                item.sellprice := amount; break;

    "speed_mod":
      item.speed_mod := amount;
      break;
    "onhitscript":              item.onhitscript := amount_str; break;
    "locked":                   item.locked := amount; break;
    "max_items_mod":            item.max_items_mod := amount; break;
    "max_slots_mod":            item.max_slots_mod := amount; break;
    "max_weight_mod":           item.max_weight_mod := amount; break;
    "no_drop_exception":        item.no_drop_exception := amount; break;
    "editable":                 item.editable := amount; break;
    "facetid":                  item.facetid := amount; break;
    "gumpheight":               item.gumpheight := amount; break;
    "gumpwidth":                item.gumpwidth := amount; break;
    "xeast":                    item.xeast := amount; break;
    "xwest":                    item.xwest := amount; break;
    "ynorth":                   item.ynorth := amount; break;
    "ysouth":                   item.ysouth := amount; break;
    "damage_cold_mod":          item.damage_cold_mod := amount; break;
    "damage_energy_mod":        item.damage_energy_mod := amount; break;
    "damage_fire_mod":          item.damage_fire_mod := amount; break;
    "damage_physical_mod":      item.damage_physical_mod := amount; break;
    "damage_poison_mod":        item.damage_poison_mod := amount; break;
    "defence_increase_cap_mod": item.defence_increase_cap_mod := amount; break;
    "defence_increase_mod":     item.defence_increase_mod := amount; break;
    "faster_cast_recovery_mod": item.faster_cast_recovery_mod := amount; break;
    "faster_casting_mod":       item.faster_casting_mod := amount; break;
    "hit_chance_mod":           item.hit_chance_mod := amount; break;
    "lower_mana_cost_mod":      item.lower_mana_cost_mod := amount; break;
    "lower_reagent_cost_mod":   item.lower_reagent_cost_mod := amount; break;
    "luck_mod":                 item.luck_mod := amount; break;
    "resist_cold_cap_mod":      item.resist_cold_cap_mod := amount; break;
    "resist_cold_mod":          item.resist_cold_mod := amount; break;
    "resist_energy_cap_mod":    item.resist_energy_cap_mod := amount; break;
    "resist_energy_mod":        item.resist_energy_mod := amount; break;
    "resist_fire_cap_mod":      item.resist_fire_cap_mod := amount; break;
    "resist_fire_mod":          item.resist_fire_mod := amount; break;
    "resist_physical_cap_mod":  item.resist_physical_cap_mod := amount; break;
    "resist_physical_mod":      item.resist_physical_mod := amount; break;
    "resist_poison_cap_mod":    item.resist_poison_cap_mod := amount; break;
    "resist_poison_mod":        item.resist_poison_mod := amount; break;
    "spell_damage_increase_mod":
      item.spell_damage_increase_mod := amount;
      break;
    "swing_speed_increase_mod": item.swing_speed_increase_mod := amount; break;
    default:                    ret := error;
  endcase

  if ( ret != error )
    return Cstr( ret );
  else
    return ret;
  endif

endfunction
