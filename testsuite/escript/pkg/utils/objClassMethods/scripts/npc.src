use uo;
use os;
use cfgfile;
use polsys;

include ":body:body";
include ":contextmenus:contextMenu";

program Install()

  Print( "System Hook -> NPC Class Methods" );

  return 1;
endprogram

exported function GetTooltipInfo( npc )

  npc := npc;

  return 1;
endfunction

exported function ControlSlots( npc, amount := 0 )

  var control_slots := GetObjProperty( npc, "ControlSlots" );
  if ( !amount )
    if ( control_slots )
      return control_slots;
    else
      return error{ "errortext" := "This npc has no control slots set." };
    endif
  else
    if ( !SetObjProperty( npc, "ControlSlots", amount ) )
      return error{ "errortext" := "Could not change the control slots of this npc." };
    endif
  endif

  return IncRevision( npc );
endfunction

exported function ParseTemplate( npc )

  var npc_template := npc.npctemplate;

  var colon_a := Find( npc_template, ":", 1 );
  var colon_b := Find( npc_template, ":", 2 );

  if ( !colon_a || !colon_b )
    return struct{ "Package" := "", "Template" := npc_template };
  endif

  return struct{ "Package" := npc_template[colon_a + 1,
                 colon_b - 2],
                 "Template" := npc_template[colon_b + 1,
                 Len( npc_template )] };
endfunction

exported function NPCInfo( npc )

  var template := ParseTemplate( npc );
  var npc_cfg := ReadConfigFile( ":" + template.Package + ":npcdesc" );
  if ( npc_cfg.errortext )
    return error{ "errortext" := "Error::NPCInfo() - Could not open :" + template.Package + ":npcdesc ->" + npc_cfg.errortext };
  endif

  var cfg_elem := npc_cfg[template.Template];
  if ( cfg_elem.errortext )
    return error{ "errortext" := "Error::NPCInfo() - Could not find elem ["
                  + template.Template + "] ->" + cfg_elem.errortext };
  endif

  return cfg_elem;
endfunction

exported function GetAlignment( npc )

  var npc_info := NPCInfo( npc );
  if ( npc_info.errortext )
    return npc_info.errortext;
  endif

  return CStr( npc_info.alignment );
endfunction

// 3006103
exported function GetContextMenuEntries( npc, player )

  var list := array, mrcspawn_cfg := ReadConfigFile( "::mrcspawn" ),
      template_info := ParseTemplate( npc );

  if ( HasPaperdoll( npc.graphic ) )
    ContextMenu_AddEntry( list, CM_CLILOC_OPEN_PAPERDOLL );
  endif

  if ( npc.npctemplate == "banker" || npc.npctemplate == "bucsbanker" )
    ContextMenu_AddEntry( list, CM_CLILOC_BANKBOX, 0xFFFF, struct{ "Flags" := CM_RANGE_CHECK + CM_LOS_CHECK
                                                                   + CM_DEAD_CHECK,
                                                                   "Mobile" := player,
                                                                   "Object" := npc,
                                                                   "Range" := 5 } );
    ContextMenu_AddEntry( list, CM_CLILOC_CHECK_BALANCE, 0xFFFF, struct{ "Flags" := CM_RANGE_CHECK + CM_LOS_CHECK
                                                                         + CM_DEAD_CHECK,
                                                                         "Mobile" := player,
                                                                         "Object" := npc,
                                                                         "Range" := 5 } );
  elseif ( TypeOfInt( mrcspawn_cfg[template_info.Template] ) == OT_CONFIGELEMREF )
    ContextMenu_AddEntry( list, CM_CLILOC_BUY, 0xFFFF, struct{ "Flags" := CM_RANGE_CHECK + CM_LOS_CHECK
                                                               + CM_DEAD_CHECK,
                                                               "Mobile" := player,
                                                               "Object" := npc,
                                                               "Range" := 5 } );
    ContextMenu_AddEntry( list, CM_CLILOC_SELL, 0xFFFF, struct{ "Flags" := CM_RANGE_CHECK + CM_LOS_CHECK
                                                                + CM_DEAD_CHECK,
                                                                "Mobile" := player,
                                                                "Object" := npc,
                                                                "Range" := 5 } );
  elseif ( npc.master == player )
    if ( npc.objtype == 0x123 || npc.objtype == 0x124 )
      ContextMenu_AddEntry( list, CM_CLILOC_OPEN_BACKPACK, 0xFFFF, struct{ "Flags" := CM_RANGE_CHECK + CM_LOS_CHECK
                                                                           + CM_DEAD_CHECK,
                                                                           "Mobile" := player,
                                                                           "Object" := npc,
                                                                           "Range" := 5 } );
    endif
    ContextMenu_AddEntry( list, CM_CLILOC_CMD_DROP );
    ContextMenu_AddEntry( list, CM_CLILOC_CMD_FOLLOW );
    ContextMenu_AddEntry( list, CM_CLILOC_CMD_GUARD );
    ContextMenu_AddEntry( list, CM_CLILOC_CMD_KILL );
    ContextMenu_AddEntry( list, CM_CLILOC_CMD_STOP );
    ContextMenu_AddEntry( list, CM_CLILOC_CMD_STAY );
    ContextMenu_AddEntry( list, CM_CLILOC_RELEASE );
    ContextMenu_AddEntry( list, CM_CLILOC_TRANSFER );
  endif

  return list;
endfunction
