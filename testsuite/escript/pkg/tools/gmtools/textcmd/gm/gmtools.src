use uo;
use os;
use cliloc;
use cfgfile;
use util;

include "include/objtype";
include ":attributes:attributes";
include "include/math";
include ":traps:traps";
include ":gmtools:layout";
include ":gmtools:info";
include ":gmtools:spawnerLayout";
include ":gumps:requestGump";
include ":containers:storageAreas";
include "include/gumpUtil"; // Added by Shinigami

const TEXTSTARTLOCY := 70;
var locationscount := 0;
var pagecount := 1;
var playercount := 0;
var bank_region := CP_DEFAULT_AREA;

program textcmd_gmtools( params )

  var who;
  var retval := 1;
  if ( params[1] == "ICP" )
    who := params[2];
  else
    who := params;
  endif
  if ( who == -1 )
    return 1;
  endif
  Detach();
  repeat
    retval := maintaingump( who );
  until ( retval == 0 );

endprogram

function maintaingump( who )
  var gmtool := SendDialogGump( who, layout, data );
  case ( gmtool[0] )
    0:  exit;
    1:  setsummonnpc( who );
    2:  setsummongroup( who );
    3:  setgomenu( who );
    4:  itemaddset( who );
    5:  invokegotomenu( who );
    6:  setmakehidden( who );
    7:  setcrimflagging( who );
    8:  exit;
    9:  exit;
    10: setitemtodefaults( who );
    11: setinfernotrap( who );
    12: invokegomenu( who );
    13: spawnpoint( who );
    14: showspawn( who, 5 );
    15: showspawn( who, 10 );
    16: hidespawn( who, 5 );
    17: hidespawn( who, 10 );
    18: standard_trap( who, 3 );
    19: standard_trap( who, 2 );
    20: standard_trap( who, 1 );
    21: GMT_removetrap( who );
    22: hideinferno( who, 5 );
    23: hideinferno( who, 10 );
    24: showinferno( who, 5 );
    25: showinferno( who, 10 );
    26: recall( who );
    27: gate( who );
    28: mark( who );
    29: permgate( who );
    30: lighting( who );
    31: Run_Script( ":accounts:commands/gm/acctinfo", who );
    32: createswitch( who );
    33: chestspawner( who );
  endcase
  return 1;
endfunction

////////////////////////////////////////
// basic tool functions contained here
////////////////////////////////////////

function chestspawner( who )
  var res := SendDialogGump( who, spawnerlayout, spawnerdata );
  print( res[5] );
  if ( res[0] == 99 )
    var duration := res[5];
    var amount;
    var level;
    var range;
    foreach thing in ( res.keys )
      if ( ( thing >= 10 ) && ( thing < 20 ) )
        level := thing - 10;
      elseif ( ( thing >= 20 ) && ( thing < 30 ) )
        amount := thing - 20;
      elseif ( ( thing >= 30 ) && ( thing < 40 ) )
        range := thing - 30;
      endif
    endforeach
    var targ := TargetCoordinates( who );
    if ( !targ )
      return;
    endif
    duration[1, find( duration, ": ", 1 ) + 1] := "";
    print( "dur " + duration );
    var newduration := ( CInt( duration ) * 60 );
    print( "new " + newduration );
    if ( newduration < 60 )
      SendSysMessage( who, "Duration Error: Aborting" );
      return;
    endif
    var item := CreateItemAtLocation( targ.x, targ.y, targ.z, 0x1888b, 1,
                                      who.realm );
    SetObjProperty( item, "level", level );
    SetObjProperty( item, "range", range );
    SetObjProperty( item, "amount", amount );
    SetObjProperty( item, "duration", CInt( newduration ) );
    EraseObjProperty( item, "waiting" );
  elseif ( res[0] == 89 )
    foreach item in ListItemsNearLocationOfType( who.x, who.y, who.z, 5, 0x1888b,
                                                 who.realm )
      item.graphic := 4483;
    endforeach
  else
    foreach item in ListItemsNearLocationOfType( who.x, who.y, who.z, 5, 0x1888b,
                                                 who.realm )
      item.graphic := 1;
    endforeach
  endif

endfunction

function createswitch( who )
  SendSysMessage( who, "select the item to make a switch out of" );
  var chest := Target( who );
  if ( !chest )
    SendSysMessage( who, "canceled" );
  else
    SetObjProperty( chest, "usescript", chest.usescript );
    SendSysMessage( who,
                    "You create a switch out of the item, be sure to change its graphic through the interface."
                    );
    chest.usescript := ":gmtools:lever";
  endif

endfunction

function lighting( who )
  SendSysMessage( who, "Target the item you want wish to set this command to." );
  var targetitem := Target( who );
  var oldscript := targetitem.script;
  SetObjProperty( targetitem, "oldscript", oldscript );
  var oldgraphic := targetitem.graphic;
  SetObjProperty( targetitem, "oldgraphic", oldgraphic );
  var oldcolor := targetitem.color;
  SetObjProperty( targetitem, "oldcolor", oldcolor );
  var oldname := targetitem.name;
  SetObjProperty( targetitem, "oldname", oldname );
  targetitem.name := "lighting crystal";
  targetitem.graphic := 0x1ECD;
  targetitem.color := 0x0;
  targetitem.usescript := ":gmtools:lightingItem";
  targetitem.newbie := 1;

endfunction

function permgate( caster )
  SendSysMessage( caster, "Select a rune to gate from." );
  var cast_on := Target( caster );
  var tox := CInt( GetObjProperty( cast_on, "x" ) );
  var toy := CInt( GetObjProperty( cast_on, "y" ) );
  var toz := CInt( GetObjProperty( cast_on, "z" ) );
  var gate1 := CreateItemAtLocation( caster.x, caster.y, caster.z, 0x16008, 1,
                                     caster.realm );
  gate1.movable := 0;
  var gate2 := CreateItemAtLocation( tox, toy, toz, 0x16008, 1, caster.realm );
  gate2.movable := 0;
  SetObjProperty( gate1, "GateDestX", gate2.x );
  SetObjProperty( gate1, "GateDestY", gate2.y );
  SetObjProperty( gate1, "GateDestZ", gate2.z );
  SetObjProperty( gate2, "GateDestX", gate1.x );
  SetObjProperty( gate2, "GateDestY", gate1.y );
  SetObjProperty( gate2, "GateDestZ", gate1.z );
//  maintaingump(caster);
endfunction

function gate( caster )
  SendSysMessage( caster, "Select a rune to gate from." );
  var cast_on := Target( caster );
  var tox := CInt( GetObjProperty( cast_on, "x" ) );
  var toy := CInt( GetObjProperty( cast_on, "y" ) );
  var toz := CInt( GetObjProperty( cast_on, "z" ) );
  set_critical( 1 );
  var gate1 := CreateItemAtLocation( caster.x, caster.y, caster.z,
                                     UOBJ_BLUE_MOONGATE, 1, caster.realm );
  gate1.movable := 0;
  var gate2 := CreateItemAtLocation( tox, toy, toz, UOBJ_BLUE_MOONGATE, 1,
                                     caster.realm );
  gate2.movable := 0;
  SetObjProperty( gate1, "GateDestX", gate2.x );
  SetObjProperty( gate1, "GateDestY", gate2.y );
  SetObjProperty( gate1, "GateDestZ", gate2.z );
  SetObjProperty( gate2, "GateDestX", gate1.x );
  SetObjProperty( gate2, "GateDestY", gate1.y );
  SetObjProperty( gate2, "GateDestZ", gate1.z );
  Detach();
  set_critical( 0 );
  sleep( 10 );
  set_critical( 1 );
  DestroyItem( gate1 );
  DestroyItem( gate2 );
  set_critical( 0 );
//  maintaingump(caster);
endfunction

function mark( caster )
  SendSysMessage( caster, "Select a rune to mark." );
  var cast_on := Target( caster );
  if ( cast_on.IsRecallRune() )
    cast_on.SetDestination( caster.x, caster.y, caster.z, caster.realm );
    SendSysMessage( caster, "You marked: " + caster.x + " " + caster.y
                  + " " + caster.z + " " + caster.realm );
    SetName( cast_on, "a Marked Recall Rune" );
    return 1;
  else
    SendSysMessage( caster, "You can only mark recall runes.", color := 33 );
  endif
//  maintaingump(caster);
endfunction

function recall( caster )
  SendSysMessage( caster, "Select a rune to recall from." );
  var cast_on := Target( caster );
  var tox := CInt( GetObjProperty( cast_on, "x" ) );
  var toy := CInt( GetObjProperty( cast_on, "y" ) );
  var toz := CInt( GetObjProperty( cast_on, "z" ) );
  MoveObjectToLocation( caster, tox, toy, toz, caster.realm );
//  maintaingump(caster);
endfunction

function hideinferno( who, range )
  var i := 0;
  foreach x in ListItemsNearLocationOfType( who.x, who.y, who.z, range, 0x1888a,
                                            who.realm )
    x.graphic := 0x0001;
    x.movable := 0;
    i := i + 1;
  endforeach
  SendSysMessage( who, "hid " + i + " infernos." );

endfunction

function showinferno( who, range )
  var i := 0;
  foreach x in ListItemsNearLocationOfType( who.x, who.y, who.z, range, 0x1888a,
                                            who.realm )
    x.graphic := 0x1ea7;
    PrintTextAbove( x, "Hello, I am bringer of DOOM!" );
    i := i + 1;
  endforeach
  SendSysMessage( who, "Revealed " + i + " infernos." );

endfunction

function GMT_removetrap( who )
  SendSysMessage( who, "Select the container you wish to completely untrap:",
                  color := 88 );
  var chest := Target( who );
  if ( !chest )
    SendSysMessageCL( who, 1042023, color := 33 ); // Cancelled.
  else
    var untrapped := RemoveTrap( chest, "all" );
    if ( untrapped.errortext )
      SendSysMessage( who, "There were no traps on that container.",
                      color := 40 );
    else
      SendSysMessage( who, "All traps removed.", color := 66 );
    endif
  endif

endfunction

function standard_trap( who, type )

  var trap_name := "";
  var str := RequestGump( who, "Enter the trap strength (1, 2 or 3):",
                          "Trap strength", "1", CANCEL_BTN_ON, 1 );
  str := CInt( str );
  if ( str )
    SendSysMessage( who, "Select the container you wish to trap:", color := 88 );
    var chest := Target( who );
    if ( chest )
      case ( type )
        1: trap_name := "Dart";
        2: trap_name := "Gas";
        3: trap_name := "Explosion";
      endcase
      AddTrap( chest, trap_name, str, 1 );
    else
      SendSysMessageCL( who, 1042023, color := 33 ); // Cancelled.
    endif
  endif

endfunction

function hidespawn( who, range )
  var i := 0;
  foreach x in ListItemsNearLocationOfType( who.x, who.y, who.z, range, 0x1A401,
                                            who.realm )
    x.graphic := 0x0001;
    i := i + 1;
  endforeach
  SendSysMessage( who, "hid " + i + " spawnpoints." );

endfunction

function showspawn( who, range )
  var i := 0;
  foreach x in ListItemsNearLocationOfType( who.x, who.y, who.z, range, 0x1A401,
                                            who.realm )
    x.graphic := 0x1ea7;
    PrintTextAbove( x, "Hello, I am a spawnpoint!" );
    i := i + 1;
  endforeach
  SendSysMessage( who, "Revealed " + i + " spawnpoints." );

endfunction

function spawnpoint( who )
  SendSysMessage( who, "where would you like to create it?" );
  var tar := TargetCoordinates( who );
  if ( !tar )
    SendSysMessage( who, "canceled" );
  else
    var doodad := CreateItemAtLocation( tar.x, tar.y, tar.z, 0x1A401, 1,
                                        who.realm );
    doodad.movable := 0;
  endif

endfunction

function setinfernotrap( who )
  SendSysMessage( who, "set it where" );
  var where := TargetCoordinates( who );
  CreateItemAtLocation( where.x, where.y, where.z, 0x1888a, 1, who.realm );
  Detach();

endfunction

function setsummonnpc( who )
  var mobilearray := {};
  SendSysMessage( who, "target the NPC you wish to call from the item" );
  var npctarget := Target( who );
  if ( !npctarget.isA( POLCLASS_NPC ) )
    SendSysMessage( who, "that is not a NPC" );
  else
    SendSysMessage( who, "Now target the item you want wish to call the npc from" );
    var targetitem := Target( who );
    var oldscript := targetitem.script;
    SetObjProperty( targetitem, "oldscript", oldscript );
    mobilearray[1] := npctarget.serial;
    SetObjProperty( targetitem, "mobilearray", mobilearray );
    targetitem.usescript := ":gmtools:summonNPC";
  endif

endfunction

function setsummongroup( who )
  var mobilearray := {};
  SendSysMessage( who, "to define the NPCs you wish to summon, the script will ask you to target 2 coordinates that it uses to create a box around the npcs"
                  );
  SendSysMessage( who, "the script will now ask you to choose the coordinates to create that box" );
  SendSysMessage( who, "target the northwest corner of area your NPCs are stored" );
  var boxnw := TargetCoordinates( who );
  SendSysMessage( who, "now target the southwest corner of the ares your NPCs are stored" );
  var boxse := TargetCoordinates( who );
  var box := ListObjectsInBox( boxnw.x, boxnw.y, boxnw.z, boxse.x, boxse.y,
                               boxse.z, who.realm );
  foreach item in box
    if ( item.isA( POLCLASS_NPC ) )
      mobilearray.append( item.serial );
    endif
  endforeach
  SendSysMessage( who, "Now target the item you want wish to call the npc from" );
  var targetitem := Target( who );
  var oldscript := targetitem.script;
  SetObjProperty( targetitem, "oldscript", oldscript );
  SetObjProperty( targetitem, "mobilearray", mobilearray );
  targetitem.usescript := ":gmtools:summonNPC";

endfunction

function setgomenu( who )
  SendSysMessage( who, "Target the item you want wish to set this command to." );
  var targetitem := Target( who );
  var oldscript := targetitem.script;
  SetObjProperty( targetitem, "oldscript", oldscript );
  targetitem.usescript := ":gmtools:itemGo";

endfunction

function itemaddset( who )
  var range := CInt( SendTextEntryGump( who, "what range do you want to search for items",
                                        40 ) );
  SendSysMessage( who, "select an item to add this set to" );
  var targetitem := Target( who );
  SendSysMessage( who, "Select the center of the set area(radius " + range + ")" );
  var whereleft := TargetCoordinates( who );
  var stuff := ListItemsNearLocation( whereleft.x, whereleft.y, whereleft.z,
                                      CInt( range ), who.realm );
  var numthings := 1;
  var totalthings := {};
  foreach thing in stuff
    totalthings.append( thing.objtype );
    var itemnumber := {};
    itemnumber.append( thing.x - whereleft.x );
    itemnumber.append( thing.y - whereleft.y );
    itemnumber.append( thing.z - whereleft.z );
    itemnumber.append( thing.color );
    if ( thing.movable == 1 )
      itemnumber.append( 1 );
    else
      itemnumber.append( 0 );
    endif
    SetObjProperty( targetitem, "iteminfo" + numthings, itemnumber );
    numthings := numthings + 1;
  endforeach
  SetObjProperty( targetitem, "totalthings", totalthings );
  var oldscript := targetitem.script;
  SetObjProperty( targetitem, "oldscript", oldscript );
  targetitem.usescript := ":gmtools:itemAddSet";

endfunction

function setmakehidden( who )
  SendSysMessage( who, "Target the item you want wish to set this command to." );
  var targetitem := Target( who );
  var oldscript := targetitem.script;
  SetObjProperty( targetitem, "oldscript", oldscript );
  targetitem.usescript := ":gmtools:makeHidden";

endfunction

function setcrimflagging( who )
  SendSysMessage( who, "Target the item you want wish to set this command to." );
  var targetitem := Target( who );
  var oldscript := targetitem.script;
  SetObjProperty( targetitem, "oldscript", oldscript );
  var oldgraphic := targetitem.graphic;
  SetObjProperty( targetitem, "oldgraphic", oldgraphic );
  var oldcolor := targetitem.color;
  SetObjProperty( targetitem, "oldcolor", oldcolor );
  var oldname := targetitem.name;
  SetObjProperty( targetitem, "oldname", oldname );
  targetitem.name := "criminal flagging crystal";
  targetitem.graphic := 7885;
  targetitem.color := 88;
  targetitem.usescript := ":gmtools:greyItem";
  targetitem.newbie := 1;

endfunction

function setitemtodefaults( who )
  SendSysMessage( who, "target the item you wish to return to normal" );
  var targetitem := Target( who );
  var scrip := GetObjProperty( targetitem, "oldscript" );
  EraseObjProperty( targetitem, "oldscript" );
  EraseObjProperty( targetitem, "mobilearray" );
  if ( scrip == error )
    scrip := "";
  endif
  var oldgraphic := GetObjProperty( targetitem, "oldgraphic" );
  targetitem.graphic := oldgraphic;
  EraseObjProperty( targetitem, "oldgraphic" );
  var oldcolor := GetObjProperty( targetitem, "oldcolor" );
  targetitem.color := oldcolor;
  EraseObjProperty( targetitem, "oldcolor" );
  var oldname := targetitem.name;
  if ( oldname == "" )
    targetitem.name := "";
  else
    targetitem.name := oldname;
  endif
  EraseObjProperty( targetitem, "oldname" );
  var totalthings := GetObjProperty( targetitem, "totalthings" );
  if ( totalthings )
    EraseObjProperty( targetitem, "totalthings" );
    var itemtotal := len( totalthings );
    var i := 1;
    for ( i := 1; i <= itemtotal; i := i + 1 )
      EraseObjProperty( targetitem, "iteminfo" + i );
    endfor
  endif
  targetitem.usescript := scrip;

endfunction

///////////////////////////////////
// end basic tool functions
///////////////////////////////////

///////////////////////////////////
// goto functions contained here
///////////////////////////////////

function invokegotomenu( who )

  Run_Script( ":commands:coun/goto", { who } );

endfunction

function invokegomenu( who )

  Run_Script( ":commands:seer/go", { who } );

endfunction

///////////////////////////////////
// info functions contained here
///////////////////////////////////
function info( who, character, unused trg )
  var online := 0;
  foreach char in EnumerateOnlineCharacters()
    if ( char.serial == character )
      character := char;
      online := 1;
    endif
  endforeach
  if ( online == 0 )
    character := SystemFindObjectBySerial( character, SYSFIND_SEARCH_OFFLINE_MOBILES );
  endif
  if ( !character )
    SendSysMessage( who, "That player does not exist. Cancelled." );
  else
    infodata[1] := "Info On: " + character.name;
    FillInStats( character );
    FillInSkills( character );
    FillInWeapon( character );
    var result := SendDialogGump( who, infolayout, infodata );
    var reskey;
    foreach key in ( result.keys )
      if ( key >= 1000 )
        reskey := key;
      endif
    endforeach
    case ( result[0] )
      1:  // fall through intentional
      2:
      3:
      4:
      5:
      6:
      7:
      9:
      11:
      14:
      13:
      15:
        EditStat( who, character, result[0] );
      16: EditSkill( who, character, reskey - 1000 );
      17:
        character.frozen := 1;
        SendSysMessage( who, character.name + " is frozen." );
      18:
        character.frozen := 0;
        SendSysMessage( who, character.name + " is unfrozen." );
      19:
        if ( !character.isA( POLCLASS_NPC ) )
          SendSysMessage( character, "You were kicked by " + who.name + "." );
          DisconnectClient( character );
        endif
      20: MoveObjectToLocation( character, 5288, 1176, 0, "britannia" );
      21:
        if ( !character.isA( POLCLASS_NPC ) )
          var bankbox := CP_GetStorageContainerForMobile( who, bank_region,
                                                          CP_CREATE );
          SendOpenSpecialContainer( who, bankbox );
        else
          SendSysMessage( who, "Only can be used on players." );
        endif
      22:
        if ( !character.isA( POLCLASS_NPC ) )
          SendOpenSpecialContainer( who, character.backpack );
        else
          SendSysMessage( who, "Only can be used on players." );
        endif
      23: MoveObjectToLocation( character, who.x, who.y, who.z, who.realm );
      24:
        SetName( character,
                 RequestInput( who, who.backpack, "Enter a new name." ) );
    endcase
  endif
endfunction

function FillInStats( who )
  var levelname;
  case ( who.cmdlevel )
    0: levelname := "Player";
    1: levelname := "Counselor";
    2: levelname := "Seer";
    3: levelname := "GM";
    4: levelname := "Admin";
    5: levelname := "Development";
  endcase
  infodata[8] := AP_GetStat( who, STRENGTH );
  infodata[10] := AP_GetStat( who, INTELLIGENCE );
  infodata[12] := AP_GetStat( who, DEXTERITY );
  infodata[14] := who.x;
  infodata[16] := who.y;
  infodata[18] := who.z;
  infodata[20] := AP_GetVital( who, VITALID_LIFE )
                               + "/" + AP_GetVitalMaximumValue( who, VITALID_LIFE );
  infodata[22] := AP_GetVital( who, VITALID_MANA )
                               + "/" + AP_GetVitalMaximumValue( who, VITALID_MANA );
  infodata[24] := AP_GetVital( who, VITALID_STAMINA )
                               + "/" + AP_GetVitalMaximumValue( who, VITALID_STAMINA );
  infodata[26] := who.ar;
  infodata[28] := who.graphic;
  infodata[30] := who.color;
  infodata[144] := levelname;
  infodata[146] := who.acctname;
endfunction

function FillInSkills( who )
  var datindx;
  var attribindex := 1;
  var attribs := array;
  attribs := List_of_Skills;
  for ( datindx := 32; datindx <= 128; datindx := datindx + 2 )
    infodata[datindx] := GetAttribute( who, attribs[attribindex] );
    attribindex += 1;
  endfor
endfunction

function FillInWeapon( who )
  var weapfile := ReadConfigFile( ":combat:itemdesc" );
  var npcfile := ReadConfigFile( "::npcdesc" );
  if ( who.weapon )
    var idx := find( who.weapon.name, "[", 1 ); // ignore maker's mark
    if ( idx != 0 )
      var tempn := who.weapon.desc;
      tempn := tempn[1, idx - 1];
      infodata[138] := tempn;
    else
      if ( who.weapon.desc == "nodraw" )
        infodata[138] := "Wrestling";
      else
        infodata[138] := who.weapon.desc;
      endif
    endif
    var dam := weapfile[who.weapon.objtype].Damage;
    if ( !dam )
      infodata[140] := "n/a";
    else
      infodata[140] := dam;
    endif
    infodata[142] := who.weapon.hp + " / " + who.weapon.maxhp;
  else
    infodata[138] := "n/a";
    infodata[140] := "n/a";
    infodata[142] := "n/a";
    if ( who.isA( POLCLASS_NPC ) ) // Hi, i'm an NPC
      var dam := npcfile[who.npctemplate].AttackDamage;
      var weap := npcfile[who.npctemplate].AttackSkillId;
      var ar := npcfile[who.npctemplate].AR;
      if ( weap )
        infodata[138] := weap;
      endif
      if ( dam )
        infodata[140] := dam;
      endif
      if ( ar )
        infodata[142] := "AR: " + ar;
      endif
    endif
  endif
endfunction

function EditStat( who, character, result )
  SendSysMessage( who, "Caution! Values are changed immediately, Integers only!. Hit ESC to cancel."
                  );
  var val := CInt( RequestInput( who, who.backpack, "Enter a new value." ) );
  if ( !val )
    SendSysMessage( who, "Cancelled." );
  else
    case ( result )
      1:  AP_SetTrueStat( character, STRENGTH, val );
      2:  AP_SetTrueStat( character, INTELLIGENCE, val );
      3:  AP_SetTrueStat( character, DEXTERITY, val );
      4:
        MoveObjectToLocation( character, val, character.y, character.z,
                              character.realm );
      5:
        MoveObjectToLocation( character, character.x, val, character.z,
                              character.realm );
      6:
        MoveObjectToLocation( character, character.x, character.y, val,
                              character.realm );
      7:  AP_SetVital( character, VITALID_LIFE, val );
      9:  AP_SetVital( character, VITALID_MANA, val );
      11: AP_SetVital( character, VITALID_STAMINA, val );
      13: character.ar_mod := 0; character.ar_mod := val - character.ar;
      14: character.graphic := val;
      15: character.color := val;
    endcase
  endif
endfunction

function EditSkill( who, character, skill )
  SendSysMessage( who, "Caution! Values are changed immediately, Integers only!. Hit ESC to cancel."
                  );
  var val := CInt( RequestInput( who, who.backpack, "Enter a new value." ) )
                   * 10;
  if ( ( !val ) && ( val != 0 ) )
    SendSysMessage( who, "Cancelled." );
  else
    SetBaseSkillBaseValue( character, skill, val );
  endif
endfunction

///////////////////////////////////
// end info functions
///////////////////////////////////
